{"version":3,"sources":["webpack:///webpack/bootstrap da0d3acae6fa9b771dc9","webpack:///./assets/javascript/popup.js","webpack:///./assets/javascript/parser.js","webpack:///./~/underscore/underscore.js","webpack:///./assets/javascript/chordSpeller.js","webpack:///./~/tonal/index.js","webpack:///./~/tonal-array/build/index.js","webpack:///./~/tonal-pitch/build/index.js","webpack:///./~/note-parser/index.js","webpack:///./~/interval-notation/index.js","webpack:///./~/tonal-encoding/build/index.js","webpack:///./~/tonal-transpose/build/index.js","webpack:///./~/tonal-distance/build/index.js","webpack:///./~/as-arr/index.js","webpack:///./~/tonal-note/build/index.js","webpack:///./~/tonal-note/~/tonal-midi/build/index.js","webpack:///./~/tonal-note/~/tonal-freq/build/index.js","webpack:///./~/tonal-interval/build/index.js","webpack:///./~/tonal-midi/build/index.js","webpack:///./~/tonal-freq/build/index.js","webpack:///./~/tonal-range/build/index.js","webpack:///./~/tonal-pitchset/build/index.js","webpack:///./~/tonal-scale/build/index.js","webpack:///./~/tonal-dictionary/build/index.js","webpack:///./~/tonal-harmonizer/build/index.js","webpack:///./~/tonal-scale/build/scales.json","webpack:///./~/tonal-chord/build/index.js","webpack:///./~/tonal-chord/build/chords.json","webpack:///./~/tonal-notation/build/index.js","webpack:///./~/tonal-progression/build/index.js","webpack:///./~/tonal-sonority/build/index.js"],"names":["document","addEventListener","window","parser","chordSpeller","parseText","e","preventDefault","chords","console","log","getElementsByClassName","value","chord","i","$","replaceWith","append","on","text","all","parsed","split","notes","chordLetters","includes","push","chordSized","chordQualities","twoLetterChordQualities","j","check","length","slice","uniq","chordName","charAt","concat"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;ACtCA;;;;AAEA;;;;;;AACA;AACA;AACA;;AAEAA,UAASC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;AAClDC,UAAOC,MAAP;AACAD,UAAOE,YAAP;;AAEA,OAAMC,YAAY,SAAZA,SAAY,CAACC,CAAD,EAAO;AACvBA,OAAEC,cAAF;AACA,SAAIC,eAAJ;AACAC,aAAQC,GAAR,CAAYV,SAASW,sBAAT,CAAgC,aAAhC,EAA+C,CAA/C,EAAkDC,KAA9D;AACAJ,cAAS,2BAAUR,SAASW,sBAAT,CAAgC,aAAhC,EAA+C,CAA/C,EAAkDC,KAA5D,CAAT;AACA,SAAIC,cAAJ;AACA,SAAIC,UAAJ;AACAC,OAAE,SAAF,EAAaC,WAAb;AACA,UAAKF,CAAL,IAAUN,MAAV,EAAkB;AAChB;AACAK,eAAQ,4BAAaL,OAAOM,CAAP,CAAb,CAAR;AACAC,SAAE,SAAF,EAAaE,MAAb,UAA2BT,OAAOM,CAAP,CAA3B,UAAyCD,KAAzC;AACD;AACF,IAbD;AAcAE,KAAE,kBAAF,EAAsBG,EAAtB,CAAyB,QAAzB,EAAmCb,SAAnC;AACA;AACA;AACA;AACA;AACA;AAED,EAzBD;AANA,4C;;;;;;;;;;;;ACDA;;;;AACA;;;;;;AAEA,UAASF,MAAT,CAAgBgB,IAAhB,EAAsBC,GAAtB,EAA2B;AACzB,OAAIC,SAASF,KAAKG,KAAL,CAAW,QAAX,CAAb;AACA,OAAIC,QAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAZ;AACA;AACA,OAAIT,UAAJ;AACA,OAAIU,eAAe,EAAnB;AACA,QAAKV,CAAL,IAAUO,MAAV,EAAiB;AACf,SAAIE,MAAME,QAAN,CAAeJ,OAAOP,CAAP,EAAU,CAAV,CAAf,CAAJ,EAAiC;AAC/BU,oBAAaE,IAAb,CAAkBL,OAAOP,CAAP,CAAlB;AACD;AACF;AACD;AACA;AACA,OAAIa,aAAa,EAAjB;AACA,OAAIC,iBAAiB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAArB;AACA,OAAIC,0BAA0B,CAAC,IAAD,EAAO,IAAP,CAA9B;AACA,OAAIC,UAAJ;AACA,QAAKA,CAAL,IAAUN,YAAV,EAAwB;AACtB,SAAIO,QAASP,aAAaM,CAAb,EAAgB,CAAhB,KAAsB,GAAtB,IAA6BN,aAAaM,CAAb,EAAgB,CAAhB,KAAsB,GAApD,GAA2D,CAA3D,GAA+D,CAA3E;AACA,SAAIN,aAAaM,CAAb,EAAgBE,MAAhB,IAA0B,IAAID,KAA9B,IAAuCP,aAAaM,CAAb,EAAgBE,MAAhB,GAAyB,IAAID,KAA7B,IAAsCH,eAAeH,QAAf,CAAwBD,aAAaM,CAAb,EAAgB,IAAIC,KAApB,CAAxB,CAA7E,IAAqIP,aAAaM,CAAb,EAAgBE,MAAhB,GAAyB,IAAID,KAA7B,IAAsCF,wBAAwBJ,QAAxB,CAAiCD,aAAaM,CAAb,EAAgBG,KAAhB,CAAsB,IAAEF,KAAxB,EAA8B,IAAEA,KAAhC,CAAjC,CAA/K,EAA0P;AACxP;AACA,WAAIP,aAAaM,CAAb,EAAgBN,aAAaM,CAAb,EAAgBE,MAAhB,GAAuB,CAAvC,KAA6C,GAA7C,IAAoDR,aAAaM,CAAb,EAAgBN,aAAaM,CAAb,EAAgBE,MAAhB,GAAuB,CAAvC,KAA6C,GAArG,EAA0G,CACzG,CADD,MACO;AACPL,oBAAWD,IAAX,CAAgBF,aAAaM,CAAb,CAAhB;AACC;AACF;AACD;AACA,SAAIN,aAAaM,CAAb,MAAoB,GAApB,IAA2BH,WAAW,CAAX,MAAkB,GAA7C,IAAoDA,WAAW,CAAX,MAAkB,GAAtE,IAA6EA,WAAW,CAAX,MAAkB,GAAnG,EAAuG;AACrGA,oBAAa,EAAb;AACD;AACF;AACD,OAAIP,OAAO,IAAX,EAAiB;AACf,YAAOO,UAAP;AACD,IAFD,MAEO;AACP,YAAO,qBAAWO,IAAX,CAAgBP,UAAhB,CAAP;AACC;AAEF;;mBAEcxB,M;;;;;;AC1Cf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB,gBAAgB;AACzC;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,YAAY;AAClD;AACA;AACA,MAAK;AACL;AACA,wCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAY,8BAA8B;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,qDAAoD;AACpD,IAAG;;AAEH;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA,2CAA0C;AAC1C,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6DAA4D,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA8C,YAAY;AAC1D;AACA;AACA,sBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA6C,YAAY;AACzD;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY,8BAA8B;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAsD;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,0BAA0B;AACpE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAqB,cAAc;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAqB,eAAe;AACpC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA,0BAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAAyC,YAAY;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAAyC,YAAY;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,6CAA4C,mBAAmB;AAC/D;AACA;AACA,0CAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sDAAqD;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAe;AACf,eAAc;AACd,eAAc;AACd,iBAAgB;AAChB,iBAAgB;AAChB,iBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP,sBAAqB;AACrB;;AAEA;AACA;AACA,MAAK;AACL,kBAAiB;;AAEjB;AACA,mDAAkD,EAAE,iBAAiB;;AAErE;AACA,yBAAwB,8BAA8B;AACtD,4BAA2B;;AAE3B;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mDAAkD,iBAAiB;;AAEnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,EAAC;;;;;;;;;;;;;AC3gDD;;;;;;AAEA,KAAMC,eAAe,SAAfA,YAAe,CAAC+B,SAAD,EAAe;AAClC,OAAIA,UAAUC,MAAV,CAAiBD,UAAUH,MAAV,GAAiB,CAAlC,KAAwC,GAA5C,EAAgD;AAC9C,SAAInB,QAAQ,EAAZ;AACAA,WAAM,CAAN,IAAWsB,UAAUC,MAAV,CAAiBD,UAAUH,MAAV,GAAiB,CAAlC,CAAX;AACAnB,aAAQA,MAAMwB,MAAN,CAAa,gBAAMxB,KAAN,CAAYsB,UAAUF,KAAV,CAAgB,CAAhB,EAAkBE,UAAUH,MAAV,GAAiB,CAAnC,CAAZ,CAAb,CAAR;AACA,YAAOnB,KAAP;AACD;AACC,UAAO,gBAAMA,KAAN,CAAYsB,SAAZ,CAAP;AACF,EARF;;mBAee/B,Y;;;;;;ACjBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gCAA+B;AAC/B;AACA,gCAA+B;AAC/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACjDA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,EAAE;AACb,aAAY,MAAM;AAClB;AACA;AACA,YAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,SAAS;AACpB,YAAW,aAAa;AACxB,aAAY;AACZ;AACA;AACA,oCAAmC,yBAAyB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;;AAEA;AACA;AACA,YAAW,aAAa;AACxB,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,SAAS;AACpB,YAAW,aAAa;AACxB,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB;AACzB;AACA,2BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA,YAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED,qBAAoB;;AAEpB;AACA;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA,YAAW,SAAS;AACpB;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,SAAS;AACpB,aAAY,SAAS;AACrB;AACA,YAAW,SAAS;AACpB,+BAA8B,iBAAiB,cAAc;AAC7D;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yB;;;;;;ACpQA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;;AAEA;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,uBAAsB;AACtB;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,MAAM;AACjB,aAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW;AACX,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,2BAA0B;AAC1B;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,0BAAyB;AACzB;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,oBAAmB;;AAEnB;AACA;AACA,YAAW;AACX,aAAY,QAAQ;AACpB;AACA,mBAAkB;;AAElB;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,sBAAqB;AACrB;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,qBAAoB;AACpB;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,2BAA0B;AAC1B;AACA;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,0BAAyB;AACzB;AACA;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,uBAAsB;;AAEtB;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA,wBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,SAAS;AACpB,aAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,SAAS;AACpB,aAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,SAAS;AACpB,aAAY,SAAS;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2B;;;;;;AC/QA;;AAEA;AACA,4BAA2B;AAC3B,qBAAoB;AACpB,qBAAoB;AACpB,qBAAoB;AACpB;AACA;AACA;;AAEA,4BAA2B,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,QAAQ;AACnB;AACA;AACA,YAAW,MAAM;AACjB;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,WAAU,gEAAgE;AAC1E;AACA;AACA;AACA;AACA;;AAEA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAkB;AAClB,mBAAkB;;AAElB;AACA;AACA,YAAW,OAAO;AAClB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,eAAe;AAC1B,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;;;;;;;ACpMA;;AAEA;AACA,gCAA+B,IAAI,SAAS,IAAI;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,QAAQ;AACnB;AACA;AACA,mCAAkC;AAClC,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,aAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA,wBAAuB;AACvB,6BAA4B;;AAE5B;AACA;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB;AACA,YAAW,QAAQ;AACnB;AACA,YAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB;AACA,YAAW,QAAQ;AACnB;AACA,YAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,eAAe;AAC1B;AACA,YAAW,OAAO;AAClB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,YAAW,eAAe;AAC1B;AACA,YAAW,QAAQ;AACnB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAkB;AAClB;AACA;;;;;;;AC3JA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAoB;;AAEpB;AACA,KAAI;AACJ;AACA;AACA,qBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yB;;;;;;AC1DA;;AAEA,+CAA8C,cAAc;;AAE5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,QAAQ;AACnB,aAAY,aAAa;AACzB;AACA,YAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6B;;;;;;ACnEA;;AAEA,+CAA8C,cAAc;;AAE5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA,YAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+B;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACfA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,oBAAoB;AAC/B,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,oBAAoB;AAC/B,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,OAAO;AACnB;AACA,6BAA4B;AAC5B,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,2BAA2B;AAC9C,oBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,kBAAkB;AACzC;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW;AACX,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6B;;;;;;AC9PA;;AAEA,+CAA8C,cAAc;;AAE5D,gCAA+B,iFAAiF;;AAEhH;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yB;;;;;;ACjEA;;AAEA,+CAA8C,cAAc;;AAE5D;;AAEA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,aAAY,SAAS;AACrB;AACA;AACA,YAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,cAAc;AACzB,aAAY,MAAM;AAClB;AACA,YAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,aAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,aAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,aAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,qBAAqB;AAChC,YAAW,qBAAqB;AAChC,aAAY,MAAM;AAClB;AACA,YAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uB;;;;;;AC5FA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA,gCAA+B;AAC/B,gCAA+B;AAC/B,iCAAgC;AAChC,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA,YAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,aAAY,OAAO;AACnB;AACA,YAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,eAAe;AAC1B,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB;AACA,aAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6B;;;;;;ACpOA;;AAEA,+CAA8C,cAAc;;AAE5D,gCAA+B,iFAAiF;;AAEhH;;AAEA;AACA;AACA;AACA;AACA,YAAW,oBAAoB;AAC/B,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,QAAQ;AACnB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qB;;;;;;ACpDA;;AAEA,+CAA8C,cAAc;;AAE5D;;AAEA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,aAAY,SAAS;AACrB;AACA;AACA,YAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,cAAc;AACzB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,aAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,aAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,QAAQ;AACnB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,qBAAqB;AAChC,YAAW,qBAAqB;AAChC,aAAY,MAAM;AAClB;AACA,YAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uB;;;;;;AC9FA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;AACA;;AAEA,qBAAoB;AACpB;AACA,qBAAoB;AACpB;AACA,uBAAsB,iBAAiB,KAAK,eAAe;AAC3D;AACA,wBAAuB,iBAAiB,KAAK,eAAe;AAC5D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,sBAAsB;AACjC;AACA,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;;AAEnD;AACA;;AAEA;AACA;AACA;AACA,6B;;;;;;AChGA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;;AAEA,uBAAsB;AACtB,wBAAuB,2BAA2B;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA,oBAAmB,GAAG;;AAEtB;AACA;AACA,YAAW,OAAO;AAClB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,YAAW,MAAM;AACjB;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA,oDAAmD;AACnD;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;;AAEA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;;AAEA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;;AAEA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;;AAEA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yB;;;;;;ACpLA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qB;;;;;;ACxEA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,SAAS;AACpB,YAAW,oBAAoB;AAC/B,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,cAAc;AACjE;AACA,IAAG,IAAI;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,oBAAoB;AAC/B,YAAW,QAAQ;AACnB,aAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,YAAY;AAC/D;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,qB;;;;;;AC3FA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;;AAEA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+B;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;;;;;AC/TA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG,IAAI;;AAEP;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4B;;;;;;ACpjjBA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,QAAQ;AACnB,aAAY,QAAQ;AACpB;AACA,sBAAqB;;AAErB;AACA;AACA,YAAW,QAAQ;AACnB,aAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,QAAQ;AACpB;AACA,wBAAuB;AACvB;AACA;AACA,YAAW,OAAO;AAClB,aAAY,QAAQ;AACpB;AACA,yBAAwB;;AAExB;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA2B;;AAE3B;AACA;AACA,YAAW,QAAQ;AACnB;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uB;;;;;;ACtGA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,YAAW,OAAO;AAClB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D,cAAc;AACzE;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;;AAExB,YAAW;;AAEX;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU,gCAAgC,6BAA6B;AACvE;;AAEA;AACA;AACA;AACA;AACA,2C;;;;;;AChHA;;AAEA,+CAA8C,cAAc;;AAE5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,aAAa;AACxB,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B","file":"chordParser.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap da0d3acae6fa9b771dc9","import parser from './parser';\n// import chordParser from './chordParser';\nimport chordSpeller from './chordSpeller';\n// import $ from 'jquery'\n// import chordBox from './chord';\n// import tabMaker from './tabMaker';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  window.parser = parser;\n  window.chordSpeller = chordSpeller\n\n  const parseText = (e) => {\n    e.preventDefault()\n    let chords;\n    console.log(document.getElementsByClassName(\"chordString\")[0].value);\n    chords = parser(`${document.getElementsByClassName(\"chordString\")[0].value}`)\n    let chord;\n    let i;\n    $('.chords').replaceWith(`<ul class=\"chords\"></ul>`)\n    for (i in chords) {\n      // debugger\n      chord = chordSpeller(chords[i])\n      $('.chords').append(`<li>${chords[i]}: ${chord}</li>`)\n    }\n  }\n  $('.chordStringForm').on('submit', parseText)\n  // $('.addChords').on('keyDown', () => {\n  //   if (e.key == \"Enter\") {\n  //\n  //   }\n  // })\n\n})\n\n\n\n// WEBPACK FOOTER //\n// ./assets/javascript/popup.js","import underscore from \"underscore\";\nimport chordSpeller from \"./chordSpeller\"\n\nfunction parser(text, all) {\n  let parsed = text.split(/[\\s,]+/)\n  let notes = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]\n  // Parse By Letter\n  let i;\n  let chordLetters = []\n  for (i in parsed){\n    if (notes.includes(parsed[i][0])){\n      chordLetters.push(parsed[i])\n    }\n  }\n  // Need to cover C7#5, CM7#11\n  //Parse by length vs. actualChordName\n  let chordSized = []\n  let chordQualities = ['m', 'M', '+', 'ø', '/', '1']\n  let twoLetterChordQualities = ['di', 'au']\n  let j;\n  for (j in chordLetters) {\n    let check = (chordLetters[j][2] == '#' || chordLetters[j][2] == 'b') ? 0 : 1\n    if (chordLetters[j].length <= 2 + check ||(chordLetters[j].length > 2 + check && chordQualities.includes(chordLetters[j][1 + check]))|| (chordLetters[j].length > 3 + check && twoLetterChordQualities.includes(chordLetters[j].slice(1+check,3+check)))) {\n      debugger\n      if (chordLetters[j][chordLetters[j].length-1] == '1' && chordLetters[j][chordLetters[j].length-2] != '1') {\n      } else {\n      chordSized.push(chordLetters[j])\n      }\n    }\n    //remove any sequential alphabets from page Indexes\n    if (chordLetters[j] === \"G\" && chordSized[0] === \"A\" && chordSized[1] === \"B\" && chordSized[2] === \"C\"){\n      chordSized = [];\n    }\n  }\n  if (all == true) {\n    return chordSized\n  } else {\n  return underscore.uniq(chordSized)\n  }\n\n}\n\nexport default parser\n\n\n\n// WEBPACK FOOTER //\n// ./assets/javascript/parser.js","//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/underscore/underscore.js\n// module id = 2\n// module chunks = 0","import tonal from \"tonal\";\n\nconst chordSpeller = (chordName) => {\n  if (chordName.charAt(chordName.length-2) == \"/\"){\n    let chord = []\n    chord[0] = chordName.charAt(chordName.length-1)\n    chord = chord.concat(tonal.chord(chordName.slice(0,chordName.length-2)))\n    return chord\n  }\n    return tonal.chord(chordName)\n }\n\n\n\n\n\n\nexport default chordSpeller\n\n\n\n// WEBPACK FOOTER //\n// ./assets/javascript/chordSpeller.js","'use strict'\n/**\n * The `tonal` module is a facade to all the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `tonal.note.pc`\n *\n * Some modules are NOT namespaced for developer comfort:\n *\n * - `tonal-array`: for example `tonal.map(tonal.note.pc, 'C#2')`\n * - `tonal-transpose`: for example `tonal.transpose('C', '3M')`\n * - `tonal-distance`: for example `tonal.interval('C3', 'G4')`\n *\n * It also adds a couple of function aliases:\n *\n * - `tonal.scale` is an alias for `tonal.scale.get`\n * - `tonal.chord` is an alias for `tonal.chord.get`\n *\n * @example\n * var tonal = require('tonal')\n * tonal.transpose(tonal.note.pc('C#2'), 'M3') // => 'E#'\n * tonal.chord('Dmaj7') // => ['D', 'F#', 'A', 'C#']\n *\n * @module tonal\n */\n\nvar assign = Object.assign\nvar tonal = {}\n\nassign(tonal, require('tonal-array'))\nassign(tonal, require('tonal-transpose'))\nassign(tonal, require('tonal-distance'))\n\ntonal.note = require('tonal-note')\ntonal.ivl = require('tonal-interval')\ntonal.midi = require('tonal-midi')\ntonal.freq = require('tonal-freq')\ntonal.range = require('tonal-range')\n\ntonal.scale = function (name) { return tonal.scale.get(name) }\nassign(tonal.scale, require('tonal-scale'))\ntonal.chord = function (name) { return tonal.chord.get(name) }\nassign(tonal.chord, require('tonal-chord'))\n\ntonal.pitch = require('tonal-pitch')\ntonal.notation = require('tonal-notation')\ntonal.progression = require('tonal-progression')\ntonal.sonority = require('tonal-sonority')\n\nif (typeof module === 'object' && module.exports) module.exports = tonal\nif (typeof window !== 'undefined') window.Tonal = tonal\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal/index.js\n// module id = 4\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalPitch = require('tonal-pitch');\nvar tonalTranspose = require('tonal-transpose');\nvar tonalDistance = require('tonal-distance');\nvar toArr = require('as-arr');\n\n// utility\nvar isArr = Array.isArray\nfunction hasVal (e) { return e || e === 0 }\n\n/**\n * Convert anything to array. Speifically, split string separated by spaces,\n * commas or bars. If you give it an actual array, it returns it without\n * modification.\n *\n * This function __always__ returns an array (null or undefined values are converted\n * to empty arrays)\n *\n * Thanks to this function, the rest of the functions of this module accepts\n * strings as an array parameter.\n *\n * @function\n * @param {*} source - the thing to get an array from\n * @return {Array} the object as an array\n *\n * @example\n * import { asArr } from 'tonal-arrays'\n * asArr('C D E F G') // => ['C', 'D', 'E', 'F', 'G']\n * asArr('A, B, c') // => ['A', 'B', 'c']\n * asArr('1 | 2 | x') // => ['1', '2', 'x']\n */\nvar asArr = toArr.use(/\\s*\\|\\s*|\\s*,\\s*|\\s+/)\n\n/**\n * Return a new array with the elements mapped by a function.\n * Basically the same as the JavaScript standard `array.map` but with\n * two enhacements:\n *\n * - Arrays can be expressed as strings (see [asArr])\n * - This function can be partially applied. This is useful to create _mapped_\n * versions of single element functions. For an excellent introduction of\n * the adventages [read this](https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch4.html)\n *\n * @param {Function} fn - the function\n * @param {Array|String} arr - the array to be mapped\n * @return {Array}\n * @example\n * var arr = require('tonal-arr')\n * var toUp = arr.map(function(e) { return e.toUpperCase() })\n * toUp('a b c') // => ['A', 'B', 'C']\n *\n * @example\n * var tonal = require('tonal')\n * tonal.map(tonal.transpose('M3'), 'C D E') // => ['E', 'F#', 'G#']\n */\nfunction map (fn, list) {\n  return arguments.length > 1 ? map(fn)(list)\n    : function (l) { return asArr(l).map(fn) }\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @param {String|Array} list\n * @return {Array}\n * @example\n * tonal.compact(['a', 'b', null, 'c']) // => ['a', 'b', 'c']\n */\nfunction compact (arr) {\n  return asArr(arr).filter(hasVal)\n}\n\n/**\n * Filter an array with a function. Again, almost the same as JavaScript standard\n * filter function but:\n *\n * - It accepts strings as arrays\n * - Can be partially applied\n *\n * @param {Function} fn\n * @param {String|Array} arr\n * @return {Array}\n * @example\n * t.filter(t.noteName, 'a b c x bb') // => [ 'a', 'b', 'c', 'bb' ]\n */\nfunction filter (fn, list) {\n  return arguments.length > 1 ? filter(fn)(list)\n    : function (l) { return asArr(l).filter(fn) }\n}\n\n// a custom height function that\n// - returns -Infinity for non-pitch objects\n// - assumes pitch classes has octave -100 (so are sorted before that notes)\nfunction objHeight (p) {\n  if (!p) return -Infinity\n  var f = tonalPitch.fifths(p) * 7\n  var o = tonalPitch.focts(p) || -Math.floor(f / 12) - 100\n  return f + o * 12\n}\n\n// ascending comparator\nfunction ascComp (a, b) { return objHeight(a) - objHeight(b) }\n// descending comparator\nfunction descComp (a, b) { return -ascComp(a, b) }\n\n/**\n * Sort a list of notes or intervals in ascending or descending pitch order.\n * It removes from the list any thing is not a pitch (a note or interval)\n *\n * Note this function returns a __copy__ of the array, it does NOT modify\n * the original.\n *\n * @param {Array|String} list - the list of notes or intervals\n * @param {Boolean|Function} comp - (Optional) comparator.\n * Ascending pitch by default. Pass a `false` to order descending\n * or a custom comparator function (that receives pitches in array notation).\n * Note that any other value is ignored.\n * @example\n * array.sort('D E C') // => ['C', 'D', 'E']\n * array.sort('D E C', false) // => ['E', 'D', 'C']\n * // if is not a note, it wil be removed\n * array.sort('g h f i c') // => ['C', 'F', 'G']\n */\nfunction sort (list, comp) {\n  var fn = arguments.length === 1 || comp === true ? ascComp\n    : comp === false ? descComp\n    : typeof comp === 'function' ? comp : ascComp\n  // if the list is an array, make a copy\n  list = Array.isArray(list) ? list.slice() : asArr(list)\n  return listFn(function (arr) {\n    return arr.sort(fn).filter(hasVal)\n  }, list)\n}\n\n/**\n * Randomizes the order of the specified array using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * import { shuffle } from 'tonal-arrays'\n * @example\n * var tonal = require('tonal')\n * tonal.shuffle('C D E F')\n */\nvar shuffle = listFn(function (arr) {\n  var i, t\n  var m = arr.length\n  while (m) {\n    i = Math.random() * m-- | 0\n    t = arr[m]\n    arr[m] = arr[i]\n    arr[i] = t\n  }\n  return arr\n})\n\nfunction trOct (n) { return tonalTranspose.transpose(tonalPitch.pitch(0, n, 1)) }\n\n/**\n * Rotates a list a number of times. It's completly agnostic about the\n * contents of the list.\n * @param {Integer} times - the number of rotations\n * @param {Array|String} list - the list to be rotated\n * @return {Array} the rotated array\n */\nfunction rotate (times, list) {\n  var arr = asArr(list)\n  var len = arr.length\n  var n = ((times % len) + len) % len\n  return arr.slice(n, len).concat(arr.slice(0, n))\n}\n\n/**\n * Rotates an ascending list of pitches n times keeping the ascending property.\n * This functions assumes the list is an ascending list of pitches, and\n * transposes the them to ensure they are ascending after rotation.\n * It can be used, for example, to invert chords.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array|String} list - the list to be rotated\n * @return {Array} the rotated array\n */\nfunction rotateAsc (times, list) {\n  return listFn(function (arr) {\n    var len = arr.length\n    var n = ((times % len) + len) % len\n    var head = arr.slice(n, len)\n    var tail = arr.slice(0, n)\n    // See if the first note of tail is lower than the last of head\n    var s = tonalDistance.semitones(head[len - n - 1], tail[0])\n    if (s < 0) {\n      var octs = Math.floor(s / 12)\n      if (times < 0) head = head.map(trOct(octs))\n      else tail = tail.map(trOct(-octs))\n    }\n    return head.concat(tail)\n  }, list)\n}\n\n/**\n * Select elements from a list.\n *\n * @param {String|Array} numbers - a __1-based__ index of the elements\n * @param {String|Array} list - the list of pitches\n * @return {Array} the selected elements (with nulls if not valid index)\n *\n * @example\n * import { select } from 'tonal-array'\n * select('1 3 5', 'C D E F G A B') // => ['C', 'E', 'G']\n * select('-1 0 1 2 3', 'C D') // => [ null, null, 'C', 'D', null ]\n */\nfunction select (nums, list) {\n  if (arguments.length === 1) return function (l) { return select(nums, l) }\n  var arr = asArr(list)\n  return asArr(nums).map(function (n) {\n    return arr[n - 1] || null\n  })\n}\n\n// #### Transform lists in array notation\nfunction asPitchStr (p) { return tonalPitch.strPitch(p) || p }\nfunction listToStr (v) {\n  return tonalPitch.isPitch(v) ? tonalPitch.strPitch(v)\n    : isArr(v) ? v.map(asPitchStr)\n    : v\n}\n\n/**\n * Decorates a function to so it's first parameter is an array of pitches in\n * array notation. Also, if the return value is a pitch or an array of pitches\n * in array notation, it convert backs to strings.\n *\n * @private\n * @param {Function} fn - the function to decorate\n * @return {Function} the decorated function\n * @example\n * import { listFn } from 'tonal-arrays'\n * var octUp = listFn((p) => { p[2] = p[2] + 1; return p[2] })\n * octUp('C2 D2 E2') // => ['C3', 'D3', 'E3']\n */\nfunction listFn (fn, list) {\n  if (arguments.length === 1) return function (l) { return listFn(fn, l) }\n  var arr = asArr(list).map(tonalPitch.asPitch)\n  var res = fn(arr)\n  return listToStr(res)\n}\n\nexports.asArr = asArr;\nexports.map = map;\nexports.compact = compact;\nexports.filter = filter;\nexports.sort = sort;\nexports.shuffle = shuffle;\nexports.rotate = rotate;\nexports.rotateAsc = rotateAsc;\nexports.select = select;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-array/build/index.js\n// module id = 5\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar noteParser = require('note-parser');\nvar intervalNotation = require('interval-notation');\nvar tonalEncoding = require('tonal-encoding');\n\n/**\n * Create a pitch\n * @param {Integer} fifths - the number of fifths from C or from P1\n * @param {Integer} focts - the number of encoded octaves\n * @param {Integer} dir - (Optional) Only required for intervals. Can be 1 or -1\n * @return {Pitch}\n */\nfunction pitch (fifths, focts, dir) {\n  return dir ? ['tnlp', [fifths, focts], dir] : ['tnlp', [fifths, focts]]\n}\n/**\n * Test if an object is a pitch\n * @param {Pitch}\n * @return {Boolean}\n */\nfunction isPitch (p) { return Array.isArray(p) && p[0] === 'tnlp' }\n/**\n * Encode a pitch\n * @param {Integer} step\n * @param {Integer} alt\n * @param {Integer} oct\n * @param {Integer} dir - (Optional)\n */\nfunction encode$1 (s, a, o, dir) {\n  return dir ? ['tnlp', tonalEncoding.encode(s, a, o), dir] : ['tnlp', tonalEncoding.encode(s, a, o)]\n}\n\n/**\n * Decode a pitch\n * @param {Pitch} the pitch\n * @return {Array} An array with [step, alt, oct]\n */\nfunction decode$1 (p) {\n  return tonalEncoding.decode.apply(null, p[1])\n}\n\n/**\n * Get pitch type\n * @param {Pitch}\n * @return {String} 'ivl' or 'note' or null if not a pitch\n */\nfunction pType (p) {\n  return !isPitch(p) ? null : p[2] ? 'ivl' : 'note'\n}\n/**\n * Test if is a pitch note (with or without octave)\n * @param {Pitch}\n * @return {Boolean}\n */\nfunction isNotePitch (p) { return pType(p) === 'note' }\n/**\n * Test if is an interval\n * @param {Pitch}\n * @return {Boolean}\n */\nfunction isIvlPitch (p) { return pType(p) === 'ivl' }\n/**\n * Test if is a pitch class (a pitch note without octave)\n * @param {Pitch}\n * @return {Boolean}\n */\nfunction isPC (p) { return isPitch(p) && p[1].length === 1 }\n\n/**\n * Get direction of a pitch (even for notes)\n * @param {Pitch}\n * @return {Integer} 1 or -1\n */\nfunction dir (p) { return p[2] === -1 ? -1 : 1 }\n\n/**\n * Get encoded fifths from pitch.\n * @param {Pitch}\n * @return {Integer}\n */\nfunction fifths (p) { return p[2] === -1 ? -p[1][0] : p[1][0] }\n/**\n * Get encoded octaves from pitch.\n * @param {Pitch}\n * @return {Integer}\n */\nfunction focts (p) { return p[2] === -1 ? -p[1][1] : p[1][1] }\n/**\n * Get height of a pitch.\n * @param {Pitch}\n * @return {Integer}\n */\nfunction height (p) { return fifths(p) * 7 + focts(p) * 12 }\n\n/**\n * Get chroma of a pitch. The chroma is a number between 0 and 11 to represent\n * the position of a pitch inside an octave. Is the numeric equivlent of a\n * pitch class.\n *\n * @param {Pitch}\n * @return {Integer}\n */\nfunction chr (p) {\n  var f = fifths(p)\n  return 7 * f - 12 * Math.floor(f * 7 / 12)\n}\n\n// memoize parsers\nfunction memoize (fn) {\n  var cache = {}\n  return function (str) {\n    if (typeof str !== 'string') return null\n    return cache[str] || (cache[str] = fn(str))\n  }\n}\n\n/**\n * Parse a note\n * @function\n * @param {String} str\n * @return {Pitch} the pitch or null if not valid note string\n */\nvar parseNote = memoize(function (s) {\n  var p = noteParser.parse(s)\n  return p ? encode$1(p.step, p.alt, p.oct) : null\n})\n\n/**\n * Parse an interval\n * @function\n * @param {String} str\n * @return {Pitch} the pitch or null if not valid interval string\n */\nvar parseIvl = memoize(function (s) {\n  var p = intervalNotation.parse(s)\n  if (!p) return null\n  return p ? encode$1(p.simple - 1, p.alt, p.oct, p.dir) : null\n})\n\n/**\n * Parse a note or an interval\n * @param {String} str\n * @return {Pitch} the pitch or null if not valid pitch string\n */\nfunction parsePitch (s) { return parseNote(s) || parseIvl(s) }\n\n/**\n * Ensure the given object is a note pitch. If is a string, it will be\n * parsed. If not a note pitch or valid note string, it returns null.\n * @param {Pitch|String}\n * @return {Pitch}\n */\nfunction asNotePitch (p) { return isNotePitch(p) ? p : parseNote(p) }\n/**\n * Ensure the given object is a interval pitch. If is a string, it will be\n * parsed. If not a interval pitch or valid interval string, it returns null.\n * @param {Pitch|String}\n * @return {Pitch}\n */\nfunction asIvlPitch (p) { return isIvlPitch(p) ? p : parseIvl(p) }\n/**\n * Ensure the given object is a pitch. If is a string, it will be\n * parsed. If not a pitch or valid pitch string, it returns null.\n * @param {Pitch|String}\n * @return {Pitch}\n */\nfunction asPitch (p) { return isPitch(p) ? p : parsePitch(p) }\n\n/**\n * Convert a note pitch to string representation\n * @param {Pitch}\n * @return {String}\n */\nfunction strNote (p) {\n  if (!isNotePitch(p)) return null\n  return noteParser.build.apply(null, decode$1(p))\n}\n\n/**\n * Convert a interval pitch to string representation\n * @param {Pitch}\n * @return {String}\n */\nfunction strIvl (p) {\n  if (!isIvlPitch(p)) return null\n  // decode to [step, alt, oct]\n  var d = decode$1(p)\n  // d = [step, alt, oct]\n  var num = d[0] + 1 + 7 * d[2]\n  return p[2] * num + intervalNotation.altToQ(num, d[1])\n}\n\n/**\n * Convert a pitch to string representation (either notes or intervals)\n * @param {Pitch}\n * @return {String}\n */\nfunction strPitch (p) { return strNote(p) || strIvl(p) }\n\n// A function that creates a decorator\n// The returned function can _decorate_ other functions to parse and build\n// string representations\nfunction decorator (is, parse, str) {\n  return function (fn) {\n    return function (v) {\n      var i = is(v)\n      // if the value is in pitch notation no conversion\n      if (i) return fn(v)\n      // else parse the pitch\n      var p = parse(v)\n      // if parsed, apply function and back to string\n      return p ? str(fn(p)) : null\n    }\n  }\n}\n\n/**\n * Decorate a function to work internally with note pitches, even if the\n * parameters are provided as strings. Also it converts back the result\n * to string if a note pitch is returned.\n * @function\n * @param {Function} fn\n * @return {Function} the decorated function\n */\nvar noteFn = decorator(isNotePitch, parseNote, strNote)\n/**\n * Decorate a function to work internally with interval pitches, even if the\n * parameters are provided as strings. Also it converts back the result\n * to string if a interval pitch is returned.\n * @function\n * @param {Function} fn\n * @return {Function} the decorated function\n */\nvar ivlFn = decorator(isIvlPitch, parseIvl, strIvl)\n/**\n * Decorate a function to work internally with pitches, even if the\n * parameters are provided as strings. Also it converts back the result\n * to string if a pitch is returned.\n * @function\n * @param {Function} fn\n * @return {Function} the decorated function\n */\nvar pitchFn = decorator(isPitch, parsePitch, strPitch)\n\nexports.pitch = pitch;\nexports.isPitch = isPitch;\nexports.encode = encode$1;\nexports.decode = decode$1;\nexports.pType = pType;\nexports.isNotePitch = isNotePitch;\nexports.isIvlPitch = isIvlPitch;\nexports.isPC = isPC;\nexports.dir = dir;\nexports.fifths = fifths;\nexports.focts = focts;\nexports.height = height;\nexports.chr = chr;\nexports.parseNote = parseNote;\nexports.parseIvl = parseIvl;\nexports.parsePitch = parsePitch;\nexports.asNotePitch = asNotePitch;\nexports.asIvlPitch = asIvlPitch;\nexports.asPitch = asPitch;\nexports.strNote = strNote;\nexports.strIvl = strIvl;\nexports.strPitch = strPitch;\nexports.noteFn = noteFn;\nexports.ivlFn = ivlFn;\nexports.pitchFn = pitchFn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-pitch/build/index.js\n// module id = 6\n// module chunks = 0","'use strict'\n\n// util\nfunction fillStr (s, num) { return Array(num + 1).join(s) }\nfunction isNum (x) { return typeof x === 'number' }\nfunction isStr (x) { return typeof x === 'string' }\nfunction isDef (x) { return typeof x !== 'undefined' }\nfunction midiToFreq (midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)\n}\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\nfunction regex () { return REGEX }\n\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11]\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true the strings it's supposed to contain a note number\n * and some category (for example an scale: 'C# major'). It's false by default,\n * but when true, en extra tonicOf property is returned with the category ('major')\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... 11 = B. Can be used to find enharmonics\n * since, for example, chroma of 'Cb' and 'B' are both 11\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\nfunction parse (str, isTonic, tuning) {\n  if (typeof str !== 'string') return null\n  var m = REGEX.exec(str)\n  if (!m || !isTonic && m[4]) return null\n\n  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }\n  p.pc = p.letter + p.acc\n  p.step = (p.letter.charCodeAt(0) + 3) % 7\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length\n  var pos = SEMITONES[p.step] + p.alt\n  p.chroma = pos < 0 ? 12 + pos : pos % 12\n  if (m[3]) { // has octave\n    p.oct = +m[3]\n    p.midi = pos + 12 * (p.oct + 1)\n    p.freq = midiToFreq(p.midi, tuning)\n  }\n  if (isTonic) p.tonicOf = m[4]\n  return p\n}\n\nvar LETTERS = 'CDEFGAB'\nfunction acc (n) { return !isNum(n) ? '' : n < 0 ? fillStr('b', -n) : fillStr('#', n) }\nfunction oct (n) { return !isNum(n) ? '' : '' + n }\n\n/**\n * Create a string from a parsed object or `step, alteration, octave` parameters\n * @param {Object} obj - the parsed data object\n * @return {String} a note string or null if not valid parameters\n * @since 1.2\n * @example\n * parser.build(parser.parse('cb2')) // => 'Cb2'\n *\n * @example\n * // it accepts (step, alteration, octave) parameters:\n * parser.build(3) // => 'F'\n * parser.build(3, -1) // => 'Fb'\n * parser.build(3, -1, 4) // => 'Fb4'\n */\nfunction build (s, a, o) {\n  if (s === null || typeof s === 'undefined') return null\n  if (s.step) return build(s.step, s.alt, s.oct)\n  if (s < 0 || s > 6) return null\n  return LETTERS.charAt(s) + acc(a) + oct(o)\n}\n\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String|Integer} note - the note name or midi number\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n * @example\n * // midi numbers are bypassed (even as strings)\n * parser.midi(60) // => 60\n * parser.midi('60') // => 60\n */\nfunction midi (note) {\n  if ((isNum(note) || isStr(note)) && note >= 0 && note < 128) return +note\n  var p = parse(note)\n  return p && isDef(p.midi) ? p.midi : null\n}\n\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name or note midi number\n * @param {String} tuning - (Optional) the A4 frequency (440 by default)\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n * @example\n * // can change tuning (440 by default)\n * parser.freq('A4', 444) // => 444\n * parser.freq('A3', 444) // => 222\n * @example\n * // it accepts midi numbers (as numbers and as strings)\n * parser.freq(69) // => 440\n * parser.freq('69', 442) // => 442\n */\nfunction freq (note, tuning) {\n  var m = midi(note)\n  return m === null ? null : midiToFreq(m, tuning)\n}\n\nvar parser = { parse: parse, build: build, regex: regex, midi: midi, freq: freq }\n// add additional functions, one for each object property\nvar FNS = ['letter', 'acc', 'pc', 'step', 'alt', 'chroma', 'oct']\nFNS.forEach(function (name) {\n  parser[name] = function (src) {\n    var p = parse(src)\n    return p && isDef(p[name]) ? p[name] : null\n  }\n})\n\nmodule.exports = parser\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/note-parser/index.js\n// module id = 7\n// module chunks = 0","'use strict'\n\n// shorthand tonal notation (with quality after number)\nvar IVL_TNL = '([-+]?)(\\\\d+)(d{1,4}|m|M|P|A{1,4})'\n// standard shorthand notation (with quality before number)\nvar IVL_STR = '(AA|A|P|M|m|d|dd)([-+]?)(\\\\d+)'\nvar COMPOSE = '(?:(' + IVL_TNL + ')|(' + IVL_STR + '))'\nvar IVL_REGEX = new RegExp('^' + COMPOSE + '$')\n\n/**\n * Parse a string with an interval in shorthand notation (https://en.wikipedia.org/wiki/Interval_(music)#Shorthand_notation)\n * and returns an object with interval properties.\n *\n * @param {String} str - the string with the interval\n * @param {Boolean} strict - (Optional) if its false, it doesn't check if the\n * interval is valid or not. For example, parse('P2') returns null\n * (because a perfect second is not a valid interval), but\n * parse('P2', false) it returns { num: 2, dir: 1, q: 'P'... }\n * @return {Object} an object properties or null if not valid interval string\n * The returned object contains:\n * - `num`: the interval number\n * - `q`: the interval quality string (M is major, m is minor, P is perfect...)\n * - `simple`: the simplified number (from 1 to 7)\n * - `dir`: the interval direction (1 ascending, -1 descending)\n * - `type`: the interval type (P is perfectable, M is majorable)\n * - `alt`: the alteration, a numeric representation of the quality\n * - `oct`: the number of octaves the interval spans. 0 for simple intervals.\n * - `size`: the size of the interval in semitones\n * @example\n * var parse = require('interval-notation').parse\n * parse('M3')\n * // => { num: 3, q: 'M', dir: 1, simple: 3,\n * //      type: 'M', alt: 0, oct: 0, size: 4 }\n */\nfunction parse (str, strict) {\n  if (typeof str !== 'string') return null\n  var m = IVL_REGEX.exec(str)\n  if (!m) return null\n  var i = { num: +(m[3] || m[8]), q: m[4] || m[6] }\n  i.dir = (m[2] || m[7]) === '-' ? -1 : 1\n  var step = (i.num - 1) % 7\n  i.simple = step + 1\n  i.type = TYPES[step]\n  i.alt = qToAlt(i.type, i.q)\n  i.oct = Math.floor((i.num - 1) / 7)\n  i.size = i.dir * (SIZES[step] + i.alt + 12 * i.oct)\n  if (strict !== false) {\n    if (i.type === 'M' && i.q === 'P') return null\n  }\n  return i\n}\nvar SIZES = [0, 2, 4, 5, 7, 9, 11]\n\nvar TYPES = 'PMMPPMM'\n/**\n * Get the type of interval. Can be perfectavle ('P') or majorable ('M')\n * @param {Integer} num - the interval number\n * @return {String} `P` if it's perfectable, `M` if it's majorable.\n */\nfunction type (num) {\n  return TYPES[(num - 1) % 7]\n}\n\nfunction dirStr (dir) { return dir === -1 ? '-' : '' }\nfunction num (simple, oct) { return simple + 7 * oct }\n\n/**\n * Build a shorthand interval notation string from properties.\n *\n * @param {Integer} simple - the interval simple number (from 1 to 7)\n * @param {Integer} alt - the quality expressed in numbers. 0 means perfect\n * or major, depending of the interval number.\n * @param {Integer} oct - the number of octaves the interval spans.\n * 0 por simple intervals. Positive number.\n * @param {Integer} dir - the interval direction: 1 ascending, -1 descending.\n * @example\n * var interval = require('interval-notation')\n * interval.shorthand(3, 0, 0, 1) // => 'M3'\n * interval.shorthand(3, -1, 0, -1) // => 'm-3'\n * interval.shorthand(3, 1, 1, 1) // => 'A10'\n */\nfunction shorthand (simple, alt, oct, dir) {\n  return altToQ(simple, alt) + dirStr(dir) + num(simple, oct)\n}\n/**\n * Build a special shorthand interval notation string from properties.\n * The special shorthand interval notation changes the order or the standard\n * shorthand notation so instead of 'M-3' it returns '-3M'.\n *\n * The standard shorthand notation has a string 'A4' (augmented four) that can't\n * be differenciate from 'A4' (the A note in 4th octave), so the purpose of this\n * notation is avoid collisions\n *\n * @param {Integer} simple - the interval simple number (from 1 to 7)\n * @param {Integer} alt - the quality expressed in numbers. 0 means perfect\n * or major, depending of the interval number.\n * @param {Integer} oct - the number of octaves the interval spans.\n * 0 por simple intervals. Positive number.\n * @param {Integer} dir - the interval direction: 1 ascending, -1 descending.\n * @example\n * var interval = require('interval-notation')\n * interval.build(3, 0, 0, 1) // => '3M'\n * interval.build(3, -1, 0, -1) // => '-3m'\n * interval.build(3, 1, 1, 1) // => '10A'\n */\nfunction build (simple, alt, oct, dir) {\n  return dirStr(dir) + num(simple, oct) + altToQ(simple, alt)\n}\n\n/**\n * Get an alteration number from an interval quality string.\n * It accepts the standard `dmMPA` but also sharps and flats.\n *\n * @param {Integer|String} num - the interval number or a string representing\n * the interval type ('P' or 'M')\n * @param {String} quality - the quality string\n * @return {Integer} the interval alteration\n * @example\n * qToAlt('M', 'm') // => -1 (for majorables, 'm' is -1)\n * qToAlt('P', 'A') // => 1 (for perfectables, 'A' means 1)\n * qToAlt('M', 'P') // => null (majorables can't be perfect)\n */\nfunction qToAlt (num, q) {\n  var t = typeof num === 'number' ? type(num) : num\n  if (q === 'M' && t === 'M') return 0\n  if (q === 'P' && t === 'P') return 0\n  if (q === 'm' && t === 'M') return -1\n  if (/^A+$/.test(q)) return q.length\n  if (/^d+$/.test(q)) return t === 'P' ? -q.length : -q.length - 1\n  return null\n}\n\nfunction fillStr (s, n) { return Array(Math.abs(n) + 1).join(s) }\n/**\n * Get interval quality from interval type and alteration\n *\n * @function\n * @param {Integer|String} num - the interval number of the the interval\n * type ('M' for majorables, 'P' for perfectables)\n * @param {Integer} alt - the interval alteration\n * @return {String} the quality string\n * @example\n * altToQ('M', 0) // => 'M'\n */\nfunction altToQ (num, alt) {\n  var t = typeof num === 'number' ? type(Math.abs(num)) : num\n  if (alt === 0) return t === 'M' ? 'M' : 'P'\n  else if (alt === -1 && t === 'M') return 'm'\n  else if (alt > 0) return fillStr('A', alt)\n  else if (alt < 0) return fillStr('d', t === 'P' ? alt : alt + 1)\n  else return null\n}\n\nmodule.exports = { parse: parse, type: type,\n  altToQ: altToQ, qToAlt: qToAlt,\n  build: build, shorthand: shorthand }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/interval-notation/index.js\n// module id = 8\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * Functions to encoding and decoding pitches into fifths/octaves notation.\n *\n * This functions are very low level and it's probably you wont need them. That's\n * why __this module is NOT exported in the tonal package__.\n *\n * @private\n * @module encoding\n */\n\nfunction isNum (n) { return typeof n === 'number' }\n\n// Map from letter step to number of fifths starting from 'C':\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5]\n// Given a number of fifths, return the octaves they span\nfunction fOcts (f) { return Math.floor(f * 7 / 12) }\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts)\n\nfunction encode (step, alt, oct) {\n  var f = FIFTHS[step] + 7 * alt\n  if (!isNum(oct)) return [f]\n  var o = oct - FIFTH_OCTS[step] - 4 * alt\n  return [f, o]\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered (f) {\n  var i = (f + 1) % 7\n  return i < 0 ? 7 + i : i\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for ['F', 'C', 'G', 'D', 'A', 'E', 'B'] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6]\n\n/**\n * Decode a encoded pitch\n * @param {Number} fifths - the number of fifths\n * @param {Number} octs - the number of octaves to compensate the fifhts\n * @return {Array} in the form [step, alt, oct]\n */\nfunction decode (f, o) {\n  var step = STEPS[unaltered(f)]\n  var alt = Math.floor((f + 1) / 7)\n  if (!isNum(o)) return [step, alt]\n  var oct = o + 4 * alt + FIFTH_OCTS[step]\n  return [step, alt, oct]\n}\n\nexports.encode = encode;\nexports.decode = decode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-encoding/build/index.js\n// module id = 9\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalPitch = require('tonal-pitch');\n\nfunction trBy (i, p) {\n  var t = tonalPitch.pType(p)\n  if (!t) return null\n  var f = tonalPitch.fifths(i) + tonalPitch.fifths(p)\n  if (tonalPitch.isPC(p)) return ['tnlp', [f]]\n  var o = tonalPitch.focts(i) + tonalPitch.focts(p)\n  if (t === 'note') return ['tnlp', [f, o]]\n  var d = tonalPitch.height(i) + tonalPitch.height(p) < 0 ? -1 : 1\n  return ['tnlp', [d * f, d * o], d]\n}\n\n/**\n * Transpose notes. Can be used to add intervals. At least one of the parameter\n * is expected to be an interval. If not, it returns null.\n *\n * @param {String|Pitch} a - a note or interval\n * @param {String|Pitch} b - a note or interavl\n * @return {String|Pitch} the transposed pitch or null if not valid parameters\n * @example\n * var _ = require('tonal')\n * // transpose a note by an interval\n * _.transpose('d3', '3M') // => 'F#3'\n * // transpose intervals\n * _.transpose('3m', '5P') // => '7m'\n * // it works with pitch classes\n * _.transpose('d', '3M') // => 'F#'\n * // order or parameters is irrelevant\n * _.transpose('3M', 'd3') // => 'F#3'\n * // can be partially applied\n * _.map(_.transpose('3M'), 'c d e f g') // => ['E', 'F#', 'G#', 'A', 'B']\n */\nfunction transpose (a, b) {\n  if (arguments.length === 1) return function (b) { return transpose(a, b) }\n  var pa = tonalPitch.asPitch(a)\n  var pb = tonalPitch.asPitch(b)\n  var r = tonalPitch.isIvlPitch(pa) ? trBy(pa, pb)\n    : tonalPitch.isIvlPitch(pb) ? trBy(pb, pa) : null\n  return a === pa && b === pb ? r : tonalPitch.strPitch(r)\n}\n\n/**\n * Transpose a tonic a number of perfect fifths. It can be partially applied.\n *\n * @function\n * @param {Pitch|String} tonic\n * @param {Integer} number - the number of times\n * @return {String|Pitch} the transposed note\n * @example\n * import { trFifths } from 'tonal-transpose'\n * [0, 1, 2, 3, 4].map(trFifths('C')) // => ['C', 'G', 'D', 'A', 'E']\n * // or using tonal\n * tonal.trFifths('G4', 1) // => 'D5'\n */\nfunction trFifths (t, n) {\n  if (arguments.length > 1) return trFifths(t)(n)\n  return function (n) {\n    return transpose(t, tonalPitch.pitch(n, 0, 1))\n  }\n}\n\nexports.transpose = transpose;\nexports.trFifths = trFifths;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-transpose/build/index.js\n// module id = 10\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalPitch = require('tonal-pitch');\n\n// substract two pitches\nfunction substr (a, b) {\n  if (!a || !b || a[1].length !== b[1].length) return null\n  var f = tonalPitch.fifths(b) - tonalPitch.fifths(a)\n  if (tonalPitch.isPC(a)) return tonalPitch.pitch(f, -Math.floor(f * 7 / 12), 1)\n  var o = tonalPitch.focts(b) - tonalPitch.focts(a)\n  var d = tonalPitch.height(b) - tonalPitch.height(a) < 0 ? -1 : 1\n  return tonalPitch.pitch(d * f, d * o, d)\n}\n\n/**\n * Find the interval between two pitches. Both pitches MUST be of the same type:\n *\n * - notes: it returns the interval between the first and the second\n * - pitch classes: it returns the __ascending__ interval between both\n * - intervals: substract one from the other\n *\n * @param {Pitch|String} from - distance from\n * @param {Pitch|String} to - distance to\n * @return {Interval} the distance between pitches\n *\n * @example\n * var distance = require('tonal-distance')\n * distance.interval('C2', 'C3') // => 'P8'\n * distance.interval('G', 'B') // => 'M3'\n * // or use tonal\n * var tonal = require('tonal')\n * tonal.distance.interval('M2', 'P5') // => 'P4'\n */\nfunction interval (a, b) {\n  if (arguments.length === 1) return function (b) { return interval(a, b) }\n  var pa = tonalPitch.asPitch(a)\n  var pb = tonalPitch.asPitch(b)\n  var i = substr(pa, pb)\n  // if a and b are in array notation, no conversion back\n  return a === pa && b === pb ? i : tonalPitch.strIvl(i)\n}\n\n/**\n * Get the distance between two notes in semitones\n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from 'tonal-distance'\n * semitones('C3', 'A2') // => -3\n * // or use tonal\n * tonal.distance.semitones('C3', 'G3') // => 7\n */\nfunction semitones (a, b) {\n  var i = substr(tonalPitch.asPitch(a), tonalPitch.asPitch(b))\n  return i ? tonalPitch.height(i) : null\n}\n\nexports.interval = interval;\nexports.semitones = semitones;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-distance/build/index.js\n// module id = 11\n// module chunks = 0","'use strict'\n\n// Create a function that converts objects to arrays using the given string separator\nfunction use (sep) {\n  return function (o, s) {\n    var l = arguments.length\n    return l === 0 ? []\n      : Array.isArray(o) ? o\n      : typeof o === 'string' ? o.trim().split(l === 1 ? sep : s)\n      : [ o ]\n  }\n}\nvar asArr = use(/\\s+/)\nasArr.use = use\n\nmodule.exports = asArr\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/as-arr/index.js\n// module id = 12\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar noteParser = require('note-parser');\nvar tonalPitch = require('tonal-pitch');\nvar tonalTranspose = require('tonal-transpose');\nvar tonalMidi = require('tonal-midi');\nvar tonalFreq = require('tonal-freq');\n\n/**\n * Get the note midi number\n * (an alias of tonal-midi `toMidi` function)\n *\n * @function\n * @param {Array|String|Number} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * note.midi('C4') // => 60\n * @see midi.toMidi\n */\nvar midi = tonalMidi.toMidi\n\n/**\n * Get the note name of a given midi note number\n * (an alias of tonal-midi `note` function)\n *\n * @function\n * @param {Integer} midi - the midi note number\n * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {String} the note name\n * @example\n * note.fromMidi(60) // => 'C4'\n * @see midi.note\n */\nvar fromMidi = tonalMidi.note\n\n/**\n * Get the frequency of a note\n * (an alias of the tonal-freq package `toFreq` function)\n *\n * @function\n * @param {Array|String|Number} note - the note to get the frequency\n * @return {Number} the frequency\n * @example\n * note.freq('A4') // => 440\n * @see freq.toFreq\n */\nvar freq = tonalFreq.toFreq\n\n/**\n * Return the chroma of a note. The chroma is the numeric equivalent to the\n * pitch class, where 0 is C, 1 is C# or Db, 2 is D... 11 is B\n *\n * @param {String|Pitch} note\n * @return {Integer} the chroma\n * @example\n * var note = require('tonal-note')\n * note.chroma('Cb') // => 11\n * ['C', 'D', 'E', 'F'].map(note.chroma) // => [0, 2, 4, 5]\n */\nfunction chroma (n) {\n  var p = tonalPitch.asNotePitch(n)\n  return p ? tonalPitch.chr(p) : null\n}\n\n/**\n * Given a note (as string or as array notation) returns a string\n * with the note name in scientific notation or null\n * if not valid note\n *\n * @function\n * @param {Pitch|String}\n * @return {String}\n *\n * @example\n * var note = require('tonal-note')\n * note.note('cb2') // => 'Cb2'\n * ['c', 'db3', '2', 'g+', 'gx4'].map(note.name) // => ['C', 'Db3', null, null, 'G##4']\n */\nfunction note$1 (n) {\n  var p = tonalPitch.asNotePitch(n)\n  return p ? tonalPitch.strNote(p) : null\n}\n\n/**\n * Get note properties. It returns an object with the following properties:\n *\n * - step: 0 for C, 6 for B. Do not confuse with chroma\n * - alt: 0 for not accidentals, positive sharps, negative flats\n * - oct: the octave number or undefined if a pitch class\n *\n * @param {String|Pitch} note - the note\n * @return {Object} the object with note properties or null if not valid note\n * @example\n * note.props('Db3') // => { step: 1, alt: -1, oct: 3 }\n * note.props('C#') // => { step: 0, alt: 1, oct: undefined }\n */\nfunction props (n) {\n  var p = tonalPitch.asNotePitch(n)\n  if (!p) return null\n  var d = tonalPitch.decode(p)\n  return { step: d[0], alt: d[1], oct: d[2] }\n}\n\n/**\n * Given a note properties object, return the string representation if\n * scientific notation\n *\n * @param {Object} noteProps - an object with the following attributes:\n * @return {String} the note name\n *\n * - step: a number from 0 to 6 meaning note step letter from 'C' to 'B'\n * - alt: the accidentals as number (0 no accidentals, 1 is '#', 2 is '##', -2 is 'bb')\n * - oct: (Optional) the octave. If not present (or undefined) it returns a pitch class\n *\n * @example\n * note.fromProps({ step: 1, alt: -1, oct: 5 }) // => 'Db5'\n * note.fromProps({ step: 0, alt: 1 }) // => 'C#'\n */\nfunction fromProps (props) {\n  return props ? noteParser.build(props.step, props.alt, props.oct) : null\n}\n\nfunction getProp (name) {\n  return function (n) { var p = props(n); return p ? p[name] : null }\n}\n\n/**\n * Get the octave of the given pitch\n *\n * @function\n * @param {String|Pitch} note - the note\n * @return {Integer} the octave, undefined if its a pitch class or null if\n * not a valid note\n * @example\n * note.oct('C#4') // => 4\n * note.oct('C') // => undefined\n * note.oct('blah') // => undefined\n */\nvar oct = getProp('oct')\n\n/**\n * Get the note step: a number equivalent of the note letter. 0 means C and\n * 6 means B. This is different from `chroma` (see example)\n *\n * @function\n * @param {String|Pitch} note - the note\n * @return {Integer} a number between 0 and 6 or null if not a note\n * @example\n * note.step('C') // => 0\n * note.step('Cb') // => 0\n * // usually what you need is chroma\n * note.chroma('Cb') // => 6\n */\nvar step = getProp('step')\n\n/**\n * Get the note step in fifths from 'C'. One property of the perfect fifht\n * interval is that you can obtain any pitch class by transposing 'C' a\n * number of times. This function return that number.\n * @param {String|Pitch} note - the note (can be a pitch class)\n * @return {Integer} the number of fifths to reach that pitch class from 'C'\n */\nfunction pcFifths (note) {\n  var p = tonalPitch.asNotePitch(note)\n  return p ? tonalPitch.fifths(p) : null\n}\n\n/**\n * Get the note alteration: a number equivalent to the accidentals. 0 means\n * no accidentals, negative numbers are for flats, positive for sharps\n *\n * @function\n * @param {String|Pitch} note - the note\n * @return {Integer} the alteration\n * @example\n * note.alt('C') // => 0\n * note.alt('C#') // => 1\n * note.alt('Cb') // => -1\n */\nvar alt = getProp('alt')\n\n/**\n * Get pitch class of a note. The note can be a string or a pitch array.\n *\n * @function\n * @param {String|Pitch}\n * @return {String} the pitch class\n * @example\n * tonal.pc('Db3') // => 'Db'\n * tonal.map(tonal.pc, 'db3 bb6 fx2') // => [ 'Db', 'Bb', 'F##']\n */\nfunction pc (n) {\n  var p = tonalPitch.asNotePitch(n)\n  return p ? tonalPitch.strNote([ p[0], [ tonalPitch.fifths(p) ] ]) : null\n}\n\nvar ASC = tonalPitch.parseIvl('2d')\nvar DESC = tonalPitch.parseIvl('-2d')\n\n/**\n * Get the enharmonics of a note. It returns an array of three elements: the\n * below enharmonic, the note, and the upper enharmonic\n *\n * @param {String} note - the note to get the enharmonics from\n * @return {Array} an array of pitches ordered by distance to the given one\n *\n * @example\n * var note = require('tonal-note')\n * note.enharmonics('C') // => ['B#', 'C', 'Dbb']\n * note.enharmonics('A') // => ['G##', 'A', 'Bbb']\n * note.enharmonics('C#4') // => ['B##3', 'C#4' 'Db4']\n * note.enharmonics('Db') // => ['C#', 'Db', 'Ebbb'])\n */\nfunction enharmonics (pitch) {\n  var notes = []\n  notes.push(tonalTranspose.transpose(DESC, pitch))\n  if (notes[0] === null) return null\n  notes.push(pitch)\n  notes.push(tonalTranspose.transpose(ASC, pitch))\n  return notes\n}\n\n/**\n * Get a simpler enharmonic note name from a note if exists\n *\n * @param {String} note - the note to simplify\n * @return {String} the simplfiied note (if not found, return same note)\n *\n * @example\n * var note = require('tonal-note')\n * note.simplify('B#3') // => 'C4'\n */\nfunction simplify (pitch) {\n  return enharmonics(pitch).reduce(function (simple, next) {\n    if (!simple) return next\n    return simple.length > next.length ? next : simple\n  }, null)\n}\n\nexports.midi = midi;\nexports.fromMidi = fromMidi;\nexports.freq = freq;\nexports.chroma = chroma;\nexports.note = note$1;\nexports.props = props;\nexports.fromProps = fromProps;\nexports.oct = oct;\nexports.step = step;\nexports.pcFifths = pcFifths;\nexports.alt = alt;\nexports.pc = pc;\nexports.enharmonics = enharmonics;\nexports.simplify = simplify;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-note/build/index.js\n// module id = 13\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar parser = _interopDefault(require('note-parser'));\n\n/**\n * Test if the given number is a valid midi note number\n * @function\n * @param {Object} num - the thing to be tested\n * @return {Boolean} true if it's a valid midi note number\n * @example\n * midi.isValidNote(30) // => true\n * midi.isValidNote(200) // => false\n */\nfunction isValidNote (m) {\n  return parser.midi(m) !== null\n}\n\n// To match the general midi specification where `C4` is 60 we must add 12 to\n// `height` function:\n\n/**\n * Get midi note number. If you pass a midi number it will be\n * bypassed.\n *\n * @param {Array|String} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * midi.fromNote('C4') // => 60\n * midi.fromNote(60) // => 60\n * midi.fromNote('60') // => 60\n */\nfunction fromNote (val) {\n  if (Array.isArray(val) && val.length === 2) return val[0] * 7 + val[1] * 12 + 12\n  return parser.midi(val)\n}\n\nvar FLATS = 'C Db D Eb E F Gb G Ab A Bb B'.split(' ')\nvar SHARPS = 'C C# D D# E F F# G G# A A# B'.split(' ')\n\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats.\n * @function\n * @param {Integer} midi - the midi note number\n * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {String} the note name\n * @example\n * var midi = require('tonal-midi')\n * midi.toNote(61) // => 'Db4'\n * midi.toNote(61, true) // => 'C#4'\n */\nfunction toNote (num, sharps) {\n  if (num === true || num === false) return function (m) { return toNote(m, num) }\n  var pcs = sharps === true ? SHARPS : FLATS\n  var pc = pcs[num % 12]\n  var o = Math.floor(num / 12) - 1\n  return pc + o\n}\n\nexports.isValidNote = isValidNote;\nexports.fromNote = fromNote;\nexports.toNote = toNote;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-note/~/tonal-midi/build/index.js\n// module id = 14\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalMidi = require('tonal-midi');\n\n/**\n * Return a function that converts midi or notes names to frequency using\n * equal temperament.\n * @function\n * @param {Float} ref - the tuning reference\n * @return {Function} the frequency calculator. It accepts midi numbers,\n * note names, pitches and returns a float.\n * @example\n * import { toEqualTemp } from 'tonal-freq'\n * const toFreq = toEqualTemp(444)\n * toFreq('A3') // => 222\n */\nfunction toEqualTemp (ref) {\n  return function (p) {\n    var m = tonalMidi.fromNote(p)\n    return m ? Math.pow(2, (m - 69) / 12) * ref : null\n  }\n}\n\n/**\n * Get the frequency of a pitch using equal temperament scale and A4 equal to 440Hz\n * @function\n * @param {Number|String} note - the note name or midi number\n * @return {Float} the frequency in herzs\n * @example\n * import { toFreq } from 'tonal-freq'\n * toFreq('A4') // => 440\n * // using tonal\n * tonal.toFreq('C4') // => 261.6255653005986\n */\nvar toFreq = toEqualTemp(440)\n\n/**\n * Create a function that returns a midi number from a frequency using an\n * equal temperament and `ref` frequency as 'A4' frequency.\n *\n * @param {Float} ref - the frequency of A4\n * @return {Function} a function that converts from frequency to midi\n */\nfunction fromEqualTemp (ref) {\n  return function (freq) {\n    var midiNum = 12 * (Math.log(freq) - Math.log(ref)) / Math.log(2) + 69\n    return Math.round(midiNum)\n  }\n}\n\n/**\n * Get note from frequency using a equal temeperament scale and 440Hz as\n * freq reference\n * @param {Float} freq\n * @return {Integer} midi number\n * @function\n */\nvar midiFromFreq = fromEqualTemp(440)\n\n/**\n * Get note name from frequency using an equal temperament scale with 440Hz\n * as reference\n * @param {Float} freq\n * @return {String} note name\n */\nfunction fromFreq (freq) {\n  return tonalMidi.toNote(midiFromFreq(freq))\n}\n\n/**\n * Get difference in cents between two frequencies. The frequencies can be\n * expressed with hertzs or midi numbers or note names\n * @param {Float|Integer|String} base\n * @param {Float|Integer|String} freq\n * @return {Float} The difference in cents\n * @example\n * import { cents } from 'tonal-freq'\n * cents('C4', 261) // => -4.1444603457298985\n */\nfunction cents (base, freq) {\n  var b = toFreq(base) || base\n  var f = toFreq(freq) || freq\n  return 1200 * (Math.log(f / b) / Math.log(2))\n}\n\nexports.toEqualTemp = toEqualTemp;\nexports.toFreq = toFreq;\nexports.fromEqualTemp = fromEqualTemp;\nexports.midiFromFreq = midiFromFreq;\nexports.fromFreq = fromFreq;\nexports.cents = cents;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-note/~/tonal-freq/build/index.js\n// module id = 15\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar intervalNotation = require('interval-notation');\nvar tonalPitch = require('tonal-pitch');\n\n/**\n * Get interval name. Can be used to test if it's an interval. It accepts intervals\n * as pitch or string in shorthand notation or tonal notation. It returns always\n * intervals in tonal notation.\n *\n * @param {String|Pitch} interval - the interval string or array\n * @return {String} the interval name or null if not valid interval\n * @example\n * interval.toInterval('m-3') // => '-3m'\n * interval.toInterval('3') // => null\n */\nfunction toInterval (ivl) {\n  var i = tonalPitch.asIvlPitch(ivl)\n  return i ? tonalPitch.strIvl(i) : null\n}\n\n/**\n * Get the number of the interval (same as value, but always positive)\n *\n * @param {String|Pitch} interval - the interval\n * @return {Integer} the positive interval number (P1 is 1, m2 is 2, ...)\n * @example\n * interval.num('m2') // => 2\n * interval.num('P9') // => 9\n * interval.num('P-4') // => 4\n */\nfunction num (ivl) {\n  var p = props(ivl)\n  return p ? p.num : null\n}\n\n/**\n * Get the interval value (the interval number, but positive or negative\n * depending the interval direction)\n *\n * @param {String|Pitch} interval - the interval\n * @return {Integer} the positive interval number (P1 is 1, m-2 is -2, ...)\n * @example\n * interval.num('m2') // => 2\n * interval.num('m9') // => 9\n * interval.num('P-4') // => -4\n * interval.num('m-9') // => -9\n */\nfunction value (ivl) {\n  var p = props(ivl)\n  return p ? p.num * p.dir : null\n}\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - num: the interval number (always positive)\n * - alt: the interval alteration (0 for perfect in perfectables, or 0 for major in _majorables_)\n * - dir: the interval direction (1 ascending, -1 descending)\n *\n * @param {String|Pitch} interval - the interval\n * @return {Array} the interval in the form [number, alt]\n * @example\n * interval.parse('m2') // => { num: 2, alt: -1, dir: 1 }\n * interval.parse('m9') // => { num: 9, alt: -1, dir: 1 }\n * interval.parse('P-4') // => { num: 4, alt: 0, dir: -1}\n * interval.parse('m-9') // => { num: 9, alt: -1, dir: -1 }\n */\nfunction props (ivl) {\n  var i = tonalPitch.asIvlPitch(ivl)\n  if (!i) return null\n  var d = tonalPitch.decode(i)\n  return { num: d[0] + 1 + d[2] * 7, alt: d[1], dir: i[2] }\n}\n\n/**\n * Given a interval property object, get the interval name\n *\n * @param {Object} props - the interval property object\n *\n * - num: the interval number\n * - alt: the interval alteration\n * - dir: the direction\n * @return {String} the interval name\n */\nfunction fromProps (props) {\n  if (!props || props.num < 1) return null\n  var octs = Math.floor((props.num) / 7)\n  var simple = props.num - 7 * octs\n  return intervalNotation.build(simple, props.alt, octs, props.dir)\n}\n\n/**\n * Get size in semitones of an interval\n * @param {String|Pitch} ivl\n * @return {Integer} the number of semitones or null if not an interval\n * @example\n * import { semitones } from 'tonal-interval'\n * semitones('P4') // => 5\n * // or using tonal\n * tonal.semitones('P5') // => 7\n */\nfunction semitones (ivl) {\n  var i = tonalPitch.asIvlPitch(ivl)\n  return i ? tonalPitch.height(i) : null\n}\n\n// interval numbers\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7]\n// interval qualities\nvar IQ = 'P m M m M P d P m M m M'.split(' ')\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitraty, but deterministic.\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {String} the interval name\n * @example\n * import { fromSemitones } from 'tonal-interval'\n * fromSemitones(7) // => '5P'\n * // or using tonal\n * tonal.fromSemitones(-7) // => '-5P'\n */\nfunction fromSemitones (num) {\n  var d = num < 0 ? -1 : 1\n  var n = Math.abs(num)\n  var c = n % 12\n  var o = Math.floor(n / 12)\n  return d * (IN[c] + 7 * o) + IQ[c]\n}\n\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]\n/**\n * Get the [interval class](https://en.wikipedia.org/wiki/Interval_class)\n * number of a given interval.\n *\n * In musical set theory, an interval class is the shortest distance in\n * pitch class space between two unordered pitch classes\n *\n * As paramter you can pass an interval in shorthand notation, an interval in\n * array notation or the number of semitones of the interval\n *\n * @param {String|Integer} interval - the interval or the number of semitones\n * @return {Integer} A value between 0 and 6\n *\n * @example\n * interval.ic('P8') // => 0\n * interval.ic('m6') // => 4\n * ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'M7'].map(ic) // => [0, 2, 4, 5, 5, 3, 1]\n */\nfunction ic (ivl) {\n  var i = tonalPitch.asIvlPitch(ivl)\n  var s = i ? tonalPitch.chr(i) : Math.round(ivl)\n  return isNaN(s) ? null : CLASSES[Math.abs(s) % 12]\n}\n\nvar TYPES = 'PMMPPMM'\n/**\n * Get interval type. Can be perfectable (1, 4, 5) or majorable (2, 3, 6, 7)\n * It does NOT return the actual quality.\n *\n * @param {String|Pitch} interval\n * @return {String} 'P' for perfectables, 'M' for majorables or null if not\n * valid interval\n * @example\n * interval.type('5A') // => 'P'\n */\nfunction type (ivl) {\n  var i = tonalPitch.asIvlPitch(ivl)\n  return i ? TYPES[tonalPitch.decode(i)[0]] : null\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {String|Pitch} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {String|Pitch} the inverted interval\n *\n * @example\n * interval.invert('3m') // => '6M'\n * interval.invert('2M') // => '7m'\n */\nvar invert = tonalPitch.ivlFn(function (i) {\n  var d = tonalPitch.decode(i)\n  // d = [step, alt, oct]\n  var step = (7 - d[0]) % 7\n  var alt = TYPES[d[0]] === 'P' ? -d[1] : -(d[1] + 1)\n  return tonalPitch.encode(step, alt, d[2], tonalPitch.dir(i))\n})\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {String|Array} interval - the interval to simplify\n * @return {String|Array} the simplified interval\n *\n * @example\n * interval.simplify('9M') // => '2M'\n * ['8P', '9M', '10M', '11P', '12P', '13M', '14M', '15P'].map(interval.simplify)\n * // => [ '8P', '2M', '3M', '4P', '5P', '6M', '7M', '8P' ]\n * interval.simplify('2M') // => '2M'\n * interval.simplify('-2M') // => '7m'\n */\nvar simplify = tonalPitch.ivlFn(function (i) {\n  // decode to [step, alt, octave]\n  var dec = tonalPitch.decode(i)\n  // if it's not 8 reduce the octaves to 0\n  if (dec[0] !== 0 || dec[2] !== 1) dec[2] = 0\n  // encode back\n  return tonalPitch.encode(dec[0], dec[1], dec[2], tonalPitch.dir(i))\n})\n\nexports.toInterval = toInterval;\nexports.num = num;\nexports.value = value;\nexports.props = props;\nexports.fromProps = fromProps;\nexports.semitones = semitones;\nexports.fromSemitones = fromSemitones;\nexports.ic = ic;\nexports.type = type;\nexports.invert = invert;\nexports.simplify = simplify;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-interval/build/index.js\n// module id = 16\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar parser = _interopDefault(require('note-parser'));\n\n/**\n * Convert the given note to a midi note number. If you pass a midi number it\n * will returned as is.\n *\n * @param {Array|String|Number} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * midi.toMidi('C4') // => 60\n * midi.toMidi(60) // => 60\n * midi.toMidi('60') // => 60\n */\nfunction toMidi (val) {\n  if (Array.isArray(val) && val.length === 2) return val[0] * 7 + val[1] * 12 + 12\n  return parser.midi(val)\n}\n\nvar FLATS = 'C Db D Eb E F Gb G Ab A Bb B'.split(' ')\nvar SHARPS = 'C C# D D# E F F# G G# A A# B'.split(' ')\n\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {Integer} midi - the midi note number\n * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {String} the note name\n * @example\n * var midi = require('tonal-midi')\n * midi.note(61) // => 'Db4'\n * midi.note(61, true) // => 'C#4'\n * // it rounds to nearest note\n * midi.note(61.7) // => 'D4'\n */\nfunction note (num, sharps) {\n  if (num === true || num === false) return function (m) { return note(m, num) }\n  num = Math.round(num)\n  var pcs = sharps === true ? SHARPS : FLATS\n  var pc = pcs[num % 12]\n  var o = Math.floor(num / 12) - 1\n  return pc + o\n}\n\nexports.toMidi = toMidi;\nexports.note = note;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-midi/build/index.js\n// module id = 17\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalMidi = require('tonal-midi');\n\n/**\n * Return a function that converts midi or notes names to frequency using\n * equal temperament.\n * @function\n * @param {Float} ref - the tuning reference\n * @return {Function} the frequency calculator. It accepts midi numbers,\n * note names, pitches and returns a float.\n * @example\n * import { toEqualTemp } from 'tonal-freq'\n * const toFreq = toEqualTemp(444)\n * toFreq('A3') // => 222\n */\nfunction toEqualTemp (ref) {\n  return function (p) {\n    var m = tonalMidi.toMidi(p)\n    return m ? Math.pow(2, (m - 69) / 12) * ref : null\n  }\n}\n\n/**\n * Get the frequency of a pitch using equal temperament scale and A4 equal to 440Hz\n * @function\n * @param {Number|String} note - the note name or midi number\n * @return {Float} the frequency in herzs\n * @example\n * freq.toFreq('A4') // => 440\n * freq.toFreq('C4') // => 261.6255653005986\n */\nvar toFreq = toEqualTemp(440)\n\n/**\n * Create a function that returns a midi number from a frequency using an\n * equal temperament and `ref` frequency as 'A4' frequency.\n *\n * @param {Float} ref - the frequency of A4\n * @return {Function} a function that converts from frequency to midi\n */\nfunction fromEqualTemp (ref) {\n  return function (freq) {\n    var m = 12 * (Math.log(freq) - Math.log(ref)) / Math.log(2) + 69\n    return Math.round(m * 100) / 100\n  }\n}\n\n/**\n * Get note from frequency using a equal temeperament scale and 440Hz as\n * freq reference\n * @param {Float} freq\n * @return {Integer} midi number\n * @function\n */\nvar toMidi$1 = fromEqualTemp(440)\n\n/**\n * Get note name from frequency using an equal temperament scale with 440Hz\n * as reference\n *\n * @param {Float} freq\n * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {String} note name\n * @example\n * freq.note(440) // => 'A4'\n */\nfunction note$1 (freq, useSharps) {\n  return tonalMidi.note(toMidi$1(freq), useSharps)\n}\n\n/**\n * Get difference in cents between two frequencies. The frequencies can be\n * expressed with hertzs or midi numbers or note names\n * @param {Float|Integer|String} base\n * @param {Float|Integer|String} freq\n * @return {Float} The difference in cents\n * @example\n * import { cents } from 'tonal-freq'\n * cents('C4', 261) // => -4.1444603457298985\n */\nfunction cents (base, freq) {\n  var b = toFreq(base) || base\n  var f = toFreq(freq) || freq\n  return 1200 * (Math.log(f / b) / Math.log(2))\n}\n\nexports.toEqualTemp = toEqualTemp;\nexports.toFreq = toFreq;\nexports.fromEqualTemp = fromEqualTemp;\nexports.toMidi = toMidi$1;\nexports.note = note$1;\nexports.cents = cents;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-freq/build/index.js\n// module id = 18\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalArray = require('tonal-array');\nvar tonalTranspose = require('tonal-transpose');\nvar tonalMidi = require('tonal-midi');\nvar tonalPitchset = require('tonal-pitchset');\n\nfunction isNum (n) { return typeof n === 'number' }\n// convert notes to midi if needed\nfunction asNum (n) { return isNum(n) ? n : tonalMidi.toMidi(n) }\n// ascending range\nfunction ascR (b, n) { for (var a = []; n--; a[n] = n + b); return a }\n// descending range\nfunction descR (b, n) { for (var a = []; n--; a[n] = b - n); return a }\n// create a range between a and b\nfunction ran (a, b) {\n  return a === null || b === null ? []\n    : a < b ? ascR(a, b - a + 1) : descR(a, a - b + 1)\n}\n\n/**\n * Create a numeric range. You supply a list of notes or numbers and it will\n * be conected to create complex ranges.\n *\n * @param {String|Array} list - the list of notes or numbers used\n * @return {Array} an array of numbers or empty array if not vald parameters\n *\n * @example\n * range.numeric('C5 C4') // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\n * // it works with numbers\n * range.numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\n * // complex range\n * range.numeric('C4 E4 Bb3') // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\n * // can be expressed with a string or array\n * range.numeric('C2 C4 C2') === range.numeric(['C2', 'C4', 'C2'])\n */\nfunction numeric (list) {\n  return tonalArray.asArr(list).map(asNum).reduce(function (r, n, i) {\n    if (i === 1) return ran(r, n)\n    var last = r[r.length - 1]\n    return r.concat(ran(last, n).slice(1))\n  })\n}\n\n/**\n * Create a range of chromatic notes. The altered notes will use flats.\n *\n * @function\n * @param {String|Array} list - the list of notes or midi note numbers\n * @return {Array} an array of note names\n * @example\n * tonal.chromatic('C2 E2 D2') // => ['C2', 'Db2', 'D2', 'Eb2', 'E2', 'Eb2', 'D2']\n * // with sharps\n * tonal.chromatic('C2 C3', true) // => [ 'C2', 'C#2', 'D2', 'D#2', 'E2', 'F2', 'F#2', 'G2', 'G#2', 'A2', 'A#2', 'B2', 'C3' ]\n */\nfunction chromatic (list, sharps) {\n  return tonalArray.map(tonalMidi.note(sharps === true), numeric(list))\n}\n\n/**\n * Create a range with a cycle of fifths\n * @function\n * @param {String|Pitch} tonic - the tonic note or pitch class\n * @param {Array|String} range - the range array\n * @return {Array} a range of cycle of fifths starting with the tonic\n * @example\n * range.fifths('C', [0, 6]) // => [ 'C', 'G', 'D', 'A', 'E', 'B', 'F#' ])\n */\nfunction fifths (tonic, range) {\n  return numeric(range).map(tonalTranspose.trFifths(tonic))\n}\n\n/**\n * Create a pitch set (scale or chord) range. Given a pitch set (a collection\n * of pitch classes), and a range array, it returns a range in notes.\n *\n * @param {String|Array|Function} scale - the scale to use or a function to\n * convert from midi numbers to note names\n * @param {String|Array} range - a list of notes or midi numbers\n * @return {Array} the scale range, an empty array if not valid source or\n * null if not valid start or end\n * @example\n * range.pitchSet('C D E F G A B', ['C3', 'C2'])\n * // => [ 'C3', 'B2', 'A2', 'G2', 'F2', 'E2', 'D2', 'C2' ]\n */\nfunction pitchSet (set, range) {\n  if (arguments.length === 1) return function (l) { return pitchSet(set, l) }\n\n  return tonalPitchset.filter(set, chromatic(range))\n}\n\nexports.numeric = numeric;\nexports.chromatic = chromatic;\nexports.fifths = fifths;\nexports.pitchSet = pitchSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-range/build/index.js\n// module id = 19\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalPitch = require('tonal-pitch');\nvar tonalArray = require('tonal-array');\nvar tonalTranspose = require('tonal-transpose');\n\nfunction toInt (set) { return parseInt(chroma(set), 2) }\nfunction pitchChr (p) { p = tonalPitch.asPitch(p); return p ? tonalPitch.chr(p) : null }\n\n/**\n * Given a pitch set (a list of notes or a pitch set chroma), produce the 12 rotations\n * of the chroma (and discard the ones that starts with '0')\n *\n * This can be used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with '0'\n */\nfunction rotations (set, normalize) {\n  normalize = normalize !== false\n  var binary = chroma(set).split('')\n  return tonalArray.compact(binary.map(function (_, i) {\n    var r = tonalArray.rotate(i, binary)\n    return normalize && r[0] === '0' ? null : r.join('')\n  }))\n}\n\nvar REGEX = /^[01]{12}$/\n\n/**\n * Test if the given string is a pitch set chroma.\n * @param {String} chroma - the pitch set chroma\n * @return {Boolean} true if its a valid pitchset chroma\n * @example\n * pitchset.isChroma('101010101010') // => true\n * pitchset.isChroma('101001') // => false\n */\nfunction isChroma (set) {\n  return REGEX.test(set)\n}\n\n/**\n * Get chroma of a pitch set. A chroma identifies each pitch set uniquely.\n * It's a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch set\n * @return {String} a binary representation of the pitch set\n * @example\n * pitchset.chroma('C D E') // => '1010100000000'\n */\nfunction chroma (set) {\n  if (isChroma(set)) return set\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  tonalArray.map(pitchChr, set).forEach(function (i) {\n    b[i] = 1\n  })\n  return b.join('')\n}\n\n/**\n * Get a pitch set with different tonic\n * @param {String|Pitch} tonic - the desired tonic\n * @param {Array|String} set - the list of notes or the binary representation\n * @param {Array} a list of notes or intervals (depending the root)\n * @example\n * pitchset.withTonic('c d e f g a b', 'D')\n */\nfunction withTonic (tonic, set) {\n  if (arguments.length === 1) return function (s) { return withTonic(tonic, s) }\n  return fromBinary(chroma(set), tonic)\n}\n\nvar IVLS = '1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M'.split(' ')\n/**\n * Given a pitch set in binary notation it returns the intervals or notes\n * (depending on the tonic)\n * @param {String} binary - the pitch set in binary representation\n * @param {String|Pitch} tonic - the pitch set tonic\n * @return {Array} a list of notes or intervals\n * @example\n * pitchset.fromBinary('101010101010', 'C') // => ['C', 'D', 'E', 'Gb', 'Ab', 'Bb']\n */\nfunction fromBinary (binary, tonic) {\n  if (arguments.length === 1) return function (t) { return fromBinary(binary, t) }\n  if (!isChroma(binary)) return null\n\n  tonic = tonic || 'P1'\n  return tonalArray.compact(binary.split('').map(function (d, i) {\n    return d === '1' ? tonalTranspose.transpose(IVLS[i], tonic) : null\n  }))\n}\n\n/**\n * Test if two pitch sets are identical\n *\n * @param {Array|String} set1 - one of the pitch sets\n * @param {Array|String} set2 - the other pitch set\n * @return {Boolean} true if they are equal\n * @example\n * pitchset.equal('c2 d3', 'c5 d2') // => true\n */\nfunction equal (s1, s2) {\n  if (arguments.length === 1) return function (s) { return equal(s1, s) }\n  return chroma(s1) === chroma(s2)\n}\n\n/**\n * Test if a pitch set is a subset of another\n *\n * @param {Array|String} set - the base set to test against\n * @param {Array|String} test - the set to test\n * @return {Boolean} true if the test set is a subset of the set\n * @example\n * pitchset.subset('c d e', 'C2 D4 D5 C6') // => true\n */\nfunction subset (set, test) {\n  if (arguments.length === 1) return function (t) { return subset(set, t) }\n  test = toInt(test)\n  return (test & toInt(set)) === test\n}\n\n/**\n * Test if a pitch set is a superset\n * @param {Array|String} set - the base set to test against\n * @param {Array|String} test - the set to test\n * @return {Boolean} true if the test set is a superset of the set\n * @example\n * pitchset.subset('c d e', 'C2 D4 F4 D5 E5 C6') // => true\n */\nfunction superset (set, test) {\n  if (arguments.length === 1) return function (t) { return superset(set, t) }\n  test = toInt(test)\n  return (test | toInt(set)) === test\n}\n\n/**\n * Test if a given pitch set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pitchset\n * @example\n * pitchset.includes('c d e', 'C4') // =A true\n * pitchset.includes('c d e', 'C#4') // =A false\n */\nfunction includes (set, note) {\n  if (arguments.length > 1) return includes(set)(note)\n  set = chroma(set)\n  return function (note) { return set[pitchChr(note)] === '1' }\n}\n\n/**\n * Filter a list with a pitch set\n *\n * @param {Array|String} set - the pitch set\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * pitchset.filter('c d e', 'c2 c#2 d2 c3 c#3 d3') // => [ 'c2', 'd2', 'c3', 'd3' ])\n */\nfunction filter (set, notes) {\n  if (arguments.length === 1) return function (n) { return filter(set, n) }\n  return tonalArray.asArr(notes).filter(includes(set))\n}\n\nexports.rotations = rotations;\nexports.isChroma = isChroma;\nexports.chroma = chroma;\nexports.withTonic = withTonic;\nexports.fromBinary = fromBinary;\nexports.equal = equal;\nexports.subset = subset;\nexports.superset = superset;\nexports.includes = includes;\nexports.filter = filter;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-pitchset/build/index.js\n// module id = 20\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalDictionary = require('tonal-dictionary');\nvar tonalPitch = require('tonal-pitch');\nvar tonalHarmonizer = require('tonal-harmonizer');\n\nvar DATA = require('./scales.json')\n\nvar dict = tonalDictionary.get(tonalPitch.parseIvl, DATA)\n\n/**\n * Create scales by scale type or intervals and tonic. The returned scale is an\n * array of notes (or intervals if you specify `false` as tonic)\n *\n * This function is currified\n *\n * @param {String} source - the scale type, intervals or notes\n * @param {String} tonic - the scale tonic (or false to get intervals)\n * @return {Array} the scale notes\n *\n * @example\n * var scale = require('tonal-scale')\n * // get scale notes using type and tonic\n * scale.build('maj7', 'C2') // => ['C2', 'E2', 'G2', 'B2']\n * // get scale intervals (tonic false)\n * scale.build('maj7', false) // => ['1P', '3M', '5P', '7M']\n * // partially applied\n * var maj7 = scale.build('maj7')\n * maj7('C') // => ['C', 'E', 'G', 'B']\n * // build scale from intervals\n * scale.build('1 3 5 m7 m9', 'C') // => ['C', 'E', 'G', 'Bb', 'Db']\n */\nfunction build (src, tonic) {\n  if (arguments.length === 1) return function (t) { return build(src, t) }\n  return tonalHarmonizer.harmonize(get$1(src) || src, tonic)\n}\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * var scale = require('tonal-scale')\n * scale.names() // => ['maj7', ...]\n */\nvar names = tonalDictionary.keys(DATA)\n\n/**\n * Get scale notes from scale name\n *\n * @param {String} name - the scale name\n * @return {Array} the scale notes\n *\n * @example\n * var scale = require('tonal-scale')\n * scale.get('C7') // => ['C', 'E', 'G', 'Bb']\n * scale.get('CMaj7') // => ['C', 'E', 'G', 'B']\n */\nfunction get$1 (name) {\n  var i = name.indexOf(' ')\n  var tonic = name.substring(0, i)\n  return tonalPitch.parseNote(tonic) ? tonalHarmonizer.harmonize(dict(name.substring(i + 1)), tonic)\n    : tonalHarmonizer.harmonize(dict(name), false)\n}\n\nexports.build = build;\nexports.names = names;\nexports.get = get$1;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-scale/build/index.js\n// module id = 21\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * This module contains functions to query tonal dictionaries.\n *\n * A tonal dictionary is basically a map from keys to list of intervals. It\n * also supports name aliases. See `tonal-chords` or `tonal-scales` to examples\n * of dictionaries.\n *\n * This functions are quite low level, and probably you wont need it, because\n * they are friendly served via `tonal-chords` and `tonal-scales`.\n *\n * __Those functions are NOT visible via `tonal` package__.\n *\n * @module dictionary\n */\nfunction id (x) { return x }\n\n/**\n * Query a tonal dictionary by key.\n *\n * If you pass two parameters you get a currified version: a dictionary getter.\n * (see example)\n *\n * @param {Function} parser - (Optional) the function to parse the intervals\n * @param {Hash<String, Array>} dictionary - the dictionary data\n * @param {String} key - the key to query\n * @return {Array} the list of intervals of that name or null if not present\n * in the dictionary\n * @example\n * var dict = require('tonal-dictionary')\n * var DATA = {\n * 'maj7': ['1 3 5 7', ['Maj7']],\n *   'm7': ['1 b3 5 7']\n * }\n * var chord = dict.get(null, DATA)\n * chord('maj7') // => [ '1', '3', '5', '7' ]\n * chord('Maj7') // => [ '1', '3', '5', '7' ]\n * chord('m7') // => ['1', 'b3', '5', '7']\n * chord('m7b5') // => null\n */\nfunction get (parse, raw, name) {\n  if (arguments.length > 2) return get(parse, raw)(name)\n  var data = Object.keys(raw).reduce(function (d, k) {\n    // add intervals\n    d[k] = raw[k][0].split(' ').map(parse || id)\n    // add alias\n    if (raw[k][1]) raw[k][1].forEach(function (a) { d[a] = d[k] })\n    return d\n  }, {})\n  return function (n) {\n    return data[n]\n  }\n}\n\n/**\n * Query a tonal dictionary to get all the defined keys\n *\n * If you pass only one parameter you get a partially applied version: a\n * function that returns all keys of the given dictionary.\n *\n * @param {Hash<String, Array>} dictionary - the dictionary data\n * @param {Boolean} aliases - (Optional) true to include the name aliases\n * @return {Array<String>} a list of defined keys\n * @example\n * var dict = require('tonal-dictionary')\n * var DATA = {\n * 'maj7': ['1 3 5 7', ['Maj7']],\n *   'm7': ['1 b3 5 7']\n * }\n * dict.keys(DATA, false) // => ['maj7', 'm7']\n * dict.keys(DATA, true) // => ['maj7', 'm7', 'Maj7']\n * // partially applied\n * var chordNames = dict.keys(DATA)\n * chordNames() // => ['maj7', 'm7']\n */\nfunction keys (raw, alias) {\n  if (arguments.length > 1) return keys(raw)(alias)\n  var main = Object.keys(raw)\n  var aliases = main.reduce(function (a, k) {\n    if (raw[k][1]) raw[k][1].forEach(function (n) { a.push(n) })\n    return a\n  }, [])\n  return function (alias) {\n    return alias ? main.concat(aliases) : main.slice()\n  }\n}\n\nexports.get = get;\nexports.keys = keys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-dictionary/build/index.js\n// module id = 22\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalTranspose = require('tonal-transpose');\nvar tonalDistance = require('tonal-distance');\nvar tonalArray = require('tonal-array');\n\n/**\n * Given a list of notes, return the distance from the first note to the rest.\n * @param {Array|String} notes - the list of notes\n * @return {Array} the intervals\n * @example\n * harmonizer.harmonics('C E G') // => ['1P', '3M', '5P']\n *\n * @example\n * // in tonal this functions are NOT namespaced\n * tonal.harmonics(tonal.scale('C major')) // => ['1P', ...]\n */\nfunction harmonics (list) {\n  var a = tonalArray.asArr(list)\n  return a.length ? tonalArray.compact(a.map(tonalDistance.interval(a[0]))) : a\n}\n\n/**\n * Given a list of intervals and a tonic, return that tonic transposed\n * to that intervals.\n *\n * It's currified and, calling with only one parameter, returns an harmonizer,\n * a function that harmonizes any note (see example)\n *\n * @function\n * @param {String|Array} list - the list of intervals\n * @param {String|Pitch} note - the note to be harmonized\n * @return {Array} the resulting notes\n * @example\n * harmonizer.harmonize('P1 M3 P5 M7', 'C') // => ['C', 'E', 'G', 'B']\n * @example\n * // harmonizer with partial application\n * var maj7 = harmonize.harmonizer('P1 M3 P5 M7')\n * maj7('C') // => ['C', 'E', 'G', 'B']\n * @example\n * // in tonal this function is NOT namespaced\n * var C = tonal.harmonizer('C D E')\n * C('M3') // => ['E', 'G#', 'B']\n */\nfunction harmonize (list, pitch) {\n  if (arguments.length > 1) return harmonize(list)(pitch)\n  return function (tonic) {\n    return tonalArray.compact(tonalArray.map(tonalTranspose.transpose(tonic || 'P1'), list))\n  }\n}\n\nexports.harmonics = harmonics;\nexports.harmonize = harmonize;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-harmonizer/build/index.js\n// module id = 23\n// module chunks = 0","module.exports = {\n\t\"lydian\": [\n\t\t\"1P 2M 3M 4A 5P 6M 7M\"\n\t],\n\t\"major\": [\n\t\t\"1P 2M 3M 4P 5P 6M 7M\",\n\t\t[\n\t\t\t\"ionian\"\n\t\t]\n\t],\n\t\"mixolydian\": [\n\t\t\"1P 2M 3M 4P 5P 6M 7m\",\n\t\t[\n\t\t\t\"dominant\"\n\t\t]\n\t],\n\t\"dorian\": [\n\t\t\"1P 2M 3m 4P 5P 6M 7m\"\n\t],\n\t\"aeolian\": [\n\t\t\"1P 2M 3m 4P 5P 6m 7m\",\n\t\t[\n\t\t\t\"minor\"\n\t\t]\n\t],\n\t\"phrygian\": [\n\t\t\"1P 2m 3m 4P 5P 6m 7m\"\n\t],\n\t\"locrian\": [\n\t\t\"1P 2m 3m 4P 5d 6m 7m\"\n\t],\n\t\"melodic minor\": [\n\t\t\"1P 2M 3m 4P 5P 6M 7M\"\n\t],\n\t\"melodic minor second mode\": [\n\t\t\"1P 2m 3m 4P 5P 6M 7m\"\n\t],\n\t\"lydian augmented\": [\n\t\t\"1P 2M 3M 4A 5A 6M 7M\"\n\t],\n\t\"lydian dominant\": [\n\t\t\"1P 2M 3M 4A 5P 6M 7m\",\n\t\t[\n\t\t\t\"lydian b7\"\n\t\t]\n\t],\n\t\"melodic minor fifth mode\": [\n\t\t\"1P 2M 3M 4P 5P 6m 7m\",\n\t\t[\n\t\t\t\"hindu\",\n\t\t\t\"mixolydian b6M\"\n\t\t]\n\t],\n\t\"locrian #2\": [\n\t\t\"1P 2M 3m 4P 5d 6m 7m\"\n\t],\n\t\"locrian major\": [\n\t\t\"1P 2M 3M 4P 5d 6m 7m\",\n\t\t[\n\t\t\t\"arabian\"\n\t\t]\n\t],\n\t\"altered\": [\n\t\t\"1P 2m 3m 3M 5d 6m 7m\",\n\t\t[\n\t\t\t\"super locrian\",\n\t\t\t\"diminished whole tone\",\n\t\t\t\"pomeroy\"\n\t\t]\n\t],\n\t\"major pentatonic\": [\n\t\t\"1P 2M 3M 5P 6M\",\n\t\t[\n\t\t\t\"pentatonic\"\n\t\t]\n\t],\n\t\"lydian pentatonic\": [\n\t\t\"1P 3M 4A 5P 7M\",\n\t\t[\n\t\t\t\"chinese\"\n\t\t]\n\t],\n\t\"mixolydian pentatonic\": [\n\t\t\"1P 3M 4P 5P 7m\",\n\t\t[\n\t\t\t\"indian\"\n\t\t]\n\t],\n\t\"locrian pentatonic\": [\n\t\t\"1P 3m 4P 5d 7m\",\n\t\t[\n\t\t\t\"minor seven flat five pentatonic\"\n\t\t]\n\t],\n\t\"minor pentatonic\": [\n\t\t\"1P 3m 4P 5P 7m\"\n\t],\n\t\"minor six pentatonic\": [\n\t\t\"1P 3m 4P 5P 6M\"\n\t],\n\t\"minor hexatonic\": [\n\t\t\"1P 2M 3m 4P 5P 7M\"\n\t],\n\t\"flat three pentatonic\": [\n\t\t\"1P 2M 3m 5P 6M\",\n\t\t[\n\t\t\t\"kumoi\"\n\t\t]\n\t],\n\t\"flat six pentatonic\": [\n\t\t\"1P 2M 3M 5P 6m\"\n\t],\n\t\"major flat two pentatonic\": [\n\t\t\"1P 2m 3M 5P 6M\"\n\t],\n\t\"whole tone pentatonic\": [\n\t\t\"1P 3M 5d 6m 7m\"\n\t],\n\t\"ionian pentatonic\": [\n\t\t\"1P 3M 4P 5P 7M\"\n\t],\n\t\"lydian #5P pentatonic\": [\n\t\t\"1P 3M 4A 5A 7M\"\n\t],\n\t\"lydian dominant pentatonic\": [\n\t\t\"1P 3M 4A 5P 7m\"\n\t],\n\t\"minor #7M pentatonic\": [\n\t\t\"1P 3m 4P 5P 7M\"\n\t],\n\t\"super locrian pentatonic\": [\n\t\t\"1P 3m 4d 5d 7m\"\n\t],\n\t\"in-sen\": [\n\t\t\"1P 2m 4P 5P 7m\"\n\t],\n\t\"iwato\": [\n\t\t\"1P 2m 4P 5d 7m\"\n\t],\n\t\"hirajoshi\": [\n\t\t\"1P 2M 3m 5P 6m\"\n\t],\n\t\"kumoijoshi\": [\n\t\t\"1P 2m 4P 5P 6m\"\n\t],\n\t\"pelog\": [\n\t\t\"1P 2m 3m 5P 6m\"\n\t],\n\t\"vietnamese 1\": [\n\t\t\"1P 3m 4P 5P 6m\"\n\t],\n\t\"vietnamese 2\": [\n\t\t\"1P 3m 4P 5P 7m\"\n\t],\n\t\"prometheus\": [\n\t\t\"1P 2M 3M 4A 6M 7m\"\n\t],\n\t\"prometheus neopolitan\": [\n\t\t\"1P 2m 3M 4A 6M 7m\"\n\t],\n\t\"ritusen\": [\n\t\t\"1P 2M 4P 5P 6M\"\n\t],\n\t\"scriabin\": [\n\t\t\"1P 2m 3M 5P 6M\"\n\t],\n\t\"piongio\": [\n\t\t\"1P 2M 4P 5P 6M 7m\"\n\t],\n\t\"major blues\": [\n\t\t\"1P 2M 3m 3M 5P 6M\"\n\t],\n\t\"minor blues\": [\n\t\t\"1P 3m 4P 5d 5P 7m\",\n\t\t[\n\t\t\t\"blues\"\n\t\t]\n\t],\n\t\"composite blues\": [\n\t\t\"1P 2M 3m 3M 4P 5d 5P 6M 7m\"\n\t],\n\t\"augmented\": [\n\t\t\"1P 2A 3M 5P 5A 7M\"\n\t],\n\t\"augmented heptatonic\": [\n\t\t\"1P 2A 3M 4P 5P 5A 7M\"\n\t],\n\t\"dorian #4\": [\n\t\t\"1P 2M 3m 4A 5P 6M 7m\"\n\t],\n\t\"lydian diminished\": [\n\t\t\"1P 2M 3m 4A 5P 6M 7M\"\n\t],\n\t\"whole tone\": [\n\t\t\"1P 2M 3M 4A 5A 7m\"\n\t],\n\t\"leading whole tone\": [\n\t\t\"1P 2M 3M 4A 5A 7m 7M\"\n\t],\n\t\"harmonic minor\": [\n\t\t\"1P 2M 3m 4P 5P 6m 7M\"\n\t],\n\t\"lydian minor\": [\n\t\t\"1P 2M 3M 4A 5P 6m 7m\"\n\t],\n\t\"neopolitan\": [\n\t\t\"1P 2m 3m 4P 5P 6m 7M\"\n\t],\n\t\"neopolitan minor\": [\n\t\t\"1P 2m 3m 4P 5P 6m 7m\"\n\t],\n\t\"neopolitan major\": [\n\t\t\"1P 2m 3m 4P 5P 6M 7M\",\n\t\t[\n\t\t\t\"dorian b2\"\n\t\t]\n\t],\n\t\"neopolitan major pentatonic\": [\n\t\t\"1P 3M 4P 5d 7m\"\n\t],\n\t\"romanian minor\": [\n\t\t\"1P 2M 3m 5d 5P 6M 7m\"\n\t],\n\t\"double harmonic lydian\": [\n\t\t\"1P 2m 3M 4A 5P 6m 7M\"\n\t],\n\t\"diminished\": [\n\t\t\"1P 2M 3m 4P 5d 6m 6M 7M\"\n\t],\n\t\"harmonic major\": [\n\t\t\"1P 2M 3M 4P 5P 6m 7M\"\n\t],\n\t\"double harmonic major\": [\n\t\t\"1P 2m 3M 4P 5P 6m 7M\",\n\t\t[\n\t\t\t\"gypsy\"\n\t\t]\n\t],\n\t\"egyptian\": [\n\t\t\"1P 2M 4P 5P 7m\"\n\t],\n\t\"hungarian minor\": [\n\t\t\"1P 2M 3m 4A 5P 6m 7M\"\n\t],\n\t\"hungarian major\": [\n\t\t\"1P 2A 3M 4A 5P 6M 7m\"\n\t],\n\t\"oriental\": [\n\t\t\"1P 2m 3M 4P 5d 6M 7m\"\n\t],\n\t\"spanish\": [\n\t\t\"1P 2m 3M 4P 5P 6m 7m\",\n\t\t[\n\t\t\t\"phrygian major\"\n\t\t]\n\t],\n\t\"spanish heptatonic\": [\n\t\t\"1P 2m 3m 3M 4P 5P 6m 7m\"\n\t],\n\t\"flamenco\": [\n\t\t\"1P 2m 3m 3M 4A 5P 7m\"\n\t],\n\t\"balinese\": [\n\t\t\"1P 2m 3m 4P 5P 6m 7M\"\n\t],\n\t\"todi raga\": [\n\t\t\"1P 2m 3m 4A 5P 6m 7M\"\n\t],\n\t\"malkos raga\": [\n\t\t\"1P 3m 4P 6m 7m\"\n\t],\n\t\"kafi raga\": [\n\t\t\"1P 3m 3M 4P 5P 6M 7m 7M\"\n\t],\n\t\"purvi raga\": [\n\t\t\"1P 2m 3M 4P 4A 5P 6m 7M\"\n\t],\n\t\"persian\": [\n\t\t\"1P 2m 3M 4P 5d 6m 7M\"\n\t],\n\t\"bebop\": [\n\t\t\"1P 2M 3M 4P 5P 6M 7m 7M\"\n\t],\n\t\"bebop dominant\": [\n\t\t\"1P 2M 3M 4P 5P 6M 7m 7M\"\n\t],\n\t\"bebop minor\": [\n\t\t\"1P 2M 3m 3M 4P 5P 6M 7m\"\n\t],\n\t\"bebop major\": [\n\t\t\"1P 2M 3M 4P 5P 5A 6M 7M\"\n\t],\n\t\"bebop locrian\": [\n\t\t\"1P 2m 3m 4P 5d 5P 6m 7m\"\n\t],\n\t\"minor bebop\": [\n\t\t\"1P 2M 3m 4P 5P 6m 7m 7M\"\n\t],\n\t\"mystery #1\": [\n\t\t\"1P 2m 3M 5d 6m 7m\"\n\t],\n\t\"enigmatic\": [\n\t\t\"1P 2m 3M 5d 6m 7m 7M\"\n\t],\n\t\"minor six diminished\": [\n\t\t\"1P 2M 3m 4P 5P 6m 6M 7M\"\n\t],\n\t\"ionian augmented\": [\n\t\t\"1P 2M 3M 4P 5A 6M 7M\"\n\t],\n\t\"lydian #9\": [\n\t\t\"1P 2m 3M 4A 5P 6M 7M\"\n\t],\n\t\"ichikosucho\": [\n\t\t\"1P 2M 3M 4P 5d 5P 6M 7M\"\n\t],\n\t\"six tone symmetric\": [\n\t\t\"1P 2m 3M 4P 5A 6M\"\n\t]\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-scale/build/scales.json\n// module id = 24\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalDictionary = require('tonal-dictionary');\nvar tonalPitch = require('tonal-pitch');\nvar tonalArray = require('tonal-array');\nvar noteParser = require('note-parser');\nvar tonalHarmonizer = require('tonal-harmonizer');\nvar tonalPitchset = require('tonal-pitchset');\n\nvar DATA = require('./chords.json')\n\nvar dict = tonalDictionary.get(tonalPitch.parseIvl, DATA)\n\n/**\n * Create chords by chord type or intervals and tonic. The returned chord is an\n * array of notes (or intervals if you specify `false` as tonic)\n *\n * This function is currified\n *\n * @param {String} source - the chord type, intervals or notes\n * @param {String} tonic - the chord tonic (or false to get intervals)\n * @return {Array} the chord notes\n *\n * @example\n * var chord = require('tonal-chord')\n * // get chord notes using type and tonic\n * chord.build('maj7', 'C2') // => ['C2', 'E2', 'G2', 'B2']\n * // get chord intervals (tonic false)\n * chord.build('maj7', false) // => ['1P', '3M', '5P', '7M']\n * // partially applied\n * var maj7 = chord.build('maj7')\n * maj7('C') // => ['C', 'E', 'G', 'B']\n * // create chord from intervals\n * chord.build('1 3 5 m7 m9', 'C') // => ['C', 'E', 'G', 'Bb', 'Db']\n */\nfunction build (src, tonic) {\n  if (arguments.length === 1) return function (t) { return build(src, t) }\n  return tonalHarmonizer.harmonize(dict(src) || src, tonic)\n}\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * var chord = require('tonal-chord')\n * chord.names() // => ['maj7', ...]\n */\nvar names = tonalDictionary.keys(DATA)\n\n/**\n * Get chord notes from chord name\n *\n * @param {String} name - the chord name\n * @return {Array} the chord notes\n *\n * @example\n * var chords = require('tonal-chords')\n * chords.get('C7') // => ['C', 'E', 'G', 'Bb']\n * chords.get('CMaj7') // => ['C', 'E', 'G', 'B']\n */\nfunction get$1 (name) {\n  var p = noteParser.regex().exec(name)\n  if (!p) return []\n  // it has note and chord name\n  if (p[4]) return build(p[4], p[1] + p[2] + p[3])\n  return build(p[3], p[1] + p[2])\n}\n\n/**\n * Try to parse a chord name. It returns an array with the chord type and\n * the tonic. If not tonic is found, all the name is considered the chord\n * name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @param {String} name - the chord name\n * @return {Array} an array with [type, tonic]\n * @example\n * chord.parse('Cmaj7') // => ['maj7', 'C']\n * chord.parse('C7') // => ['7', 'C']\n * chord.parse('mMaj7') // => ['mMaj7', null]\n * chord.parse('Cnonsense') // => ['nonsense', 'C']\n */\nfunction parse (name) {\n  var p = noteParser.regex().exec(name)\n  if (!p) return [name, null]\n  // it can have a chord name: Cmaj7 is ['maj7', 'C']\n  // or if not, the octave is treated as chord name: C7 is ['7', 'C']\n  // doesn't have chord name: the name is the octave (example: 'C7' is dominant)\n  return p[4] ? [p[4], p[1] + p[2] + p[3]] : [p[3], p[1] + p[2]]\n}\n\nfunction detector (data) {\n  var dict = Object.keys(data).reduce(function (dict, key) {\n    dict[tonalPitchset.chroma(data[key][0])] = key\n    return dict\n  }, {})\n\n  return function (notes) {\n    notes = tonalArray.sort(notes)\n    var sets = tonalPitchset.rotations(notes)\n    return tonalArray.compact(sets.map(function (set, i) {\n      return dict[set] ? [dict[set], notes[i]] : null\n    }))\n  }\n}\n\n/**\n * Detect a chord. Given a list of notes, return the chord name(s) if any.\n * It only detects chords with exactly same notes.\n *\n * @function\n * @param {Array|String} notes - the list of notes\n * @return {Array<Array>} an array with the possible matches in the form\n * [chordType, root]\n * @example\n * chord.detect('e c a g') // => [ [ 'M6', 'C' ], [ 'm7', 'A' ] ]\n */\nvar detect = detector(DATA)\n\nexports.build = build;\nexports.names = names;\nexports.get = get$1;\nexports.parse = parse;\nexports.detect = detect;\nexports['default'] = get$1;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-chord/build/index.js\n// module id = 25\n// module chunks = 0","module.exports = {\n\t\"4\": [\n\t\t\"1P 4P 7m 10m\",\n\t\t[\n\t\t\t\"quartal\"\n\t\t]\n\t],\n\t\"5\": [\n\t\t\"1P 5P\"\n\t],\n\t\"7\": [\n\t\t\"1P 3M 5P 7m\",\n\t\t[\n\t\t\t\"Dominant\",\n\t\t\t\"Dom\"\n\t\t]\n\t],\n\t\"9\": [\n\t\t\"1P 3M 5P 7m 9M\",\n\t\t[\n\t\t\t\"79\"\n\t\t]\n\t],\n\t\"11\": [\n\t\t\"1P 5P 7m 9M 11P\"\n\t],\n\t\"13\": [\n\t\t\"1P 3M 5P 7m 9M 13M\",\n\t\t[\n\t\t\t\"13_\"\n\t\t]\n\t],\n\t\"64\": [\n\t\t\"5P 8P 10M\"\n\t],\n\t\"M\": [\n\t\t\"1P 3M 5P\",\n\t\t[\n\t\t\t\"Major\",\n\t\t\t\"\"\n\t\t]\n\t],\n\t\"M#5\": [\n\t\t\"1P 3M 5A\",\n\t\t[\n\t\t\t\"augmented\",\n\t\t\t\"maj#5\",\n\t\t\t\"Maj#5\",\n\t\t\t\"+\",\n\t\t\t\"aug\"\n\t\t]\n\t],\n\t\"M#5add9\": [\n\t\t\"1P 3M 5A 9M\",\n\t\t[\n\t\t\t\"+add9\"\n\t\t]\n\t],\n\t\"M13\": [\n\t\t\"1P 3M 5P 7M 9M 13M\",\n\t\t[\n\t\t\t\"maj13\",\n\t\t\t\"Maj13\"\n\t\t]\n\t],\n\t\"M13#11\": [\n\t\t\"1P 3M 5P 7M 9M 11A 13M\",\n\t\t[\n\t\t\t\"maj13#11\",\n\t\t\t\"Maj13#11\",\n\t\t\t\"M13+4\",\n\t\t\t\"M13#4\"\n\t\t]\n\t],\n\t\"M6\": [\n\t\t\"1P 3M 5P 13M\",\n\t\t[\n\t\t\t\"6\"\n\t\t]\n\t],\n\t\"M6#11\": [\n\t\t\"1P 3M 5P 6M 11A\",\n\t\t[\n\t\t\t\"M6b5\",\n\t\t\t\"6#11\",\n\t\t\t\"6b5\"\n\t\t]\n\t],\n\t\"M69\": [\n\t\t\"1P 3M 5P 6M 9M\",\n\t\t[\n\t\t\t\"69\"\n\t\t]\n\t],\n\t\"M69#11\": [\n\t\t\"1P 3M 5P 6M 9M 11A\"\n\t],\n\t\"M7#11\": [\n\t\t\"1P 3M 5P 7M 11A\",\n\t\t[\n\t\t\t\"maj7#11\",\n\t\t\t\"Maj7#11\",\n\t\t\t\"M7+4\",\n\t\t\t\"M7#4\"\n\t\t]\n\t],\n\t\"M7#5\": [\n\t\t\"1P 3M 5A 7M\",\n\t\t[\n\t\t\t\"maj7#5\",\n\t\t\t\"Maj7#5\",\n\t\t\t\"maj9#5\",\n\t\t\t\"M7+\"\n\t\t]\n\t],\n\t\"M7#5sus4\": [\n\t\t\"1P 4P 5A 7M\"\n\t],\n\t\"M7#9#11\": [\n\t\t\"1P 3M 5P 7M 9A 11A\"\n\t],\n\t\"M7add13\": [\n\t\t\"1P 3M 5P 6M 7M 9M\"\n\t],\n\t\"M7b5\": [\n\t\t\"1P 3M 5d 7M\"\n\t],\n\t\"M7b6\": [\n\t\t\"1P 3M 6m 7M\"\n\t],\n\t\"M7b9\": [\n\t\t\"1P 3M 5P 7M 9m\"\n\t],\n\t\"M7sus4\": [\n\t\t\"1P 4P 5P 7M\"\n\t],\n\t\"M9\": [\n\t\t\"1P 3M 5P 7M 9M\",\n\t\t[\n\t\t\t\"maj9\",\n\t\t\t\"Maj9\"\n\t\t]\n\t],\n\t\"M9#11\": [\n\t\t\"1P 3M 5P 7M 9M 11A\",\n\t\t[\n\t\t\t\"maj9#11\",\n\t\t\t\"Maj9#11\",\n\t\t\t\"M9+4\",\n\t\t\t\"M9#4\"\n\t\t]\n\t],\n\t\"M9#5\": [\n\t\t\"1P 3M 5A 7M 9M\",\n\t\t[\n\t\t\t\"Maj9#5\"\n\t\t]\n\t],\n\t\"M9#5sus4\": [\n\t\t\"1P 4P 5A 7M 9M\"\n\t],\n\t\"M9b5\": [\n\t\t\"1P 3M 5d 7M 9M\"\n\t],\n\t\"M9sus4\": [\n\t\t\"1P 4P 5P 7M 9M\"\n\t],\n\t\"Madd9\": [\n\t\t\"1P 3M 5P 9M\",\n\t\t[\n\t\t\t\"2\",\n\t\t\t\"add9\",\n\t\t\t\"add2\"\n\t\t]\n\t],\n\t\"Maj7\": [\n\t\t\"1P 3M 5P 7M\",\n\t\t[\n\t\t\t\"maj7\",\n\t\t\t\"M7\"\n\t\t]\n\t],\n\t\"Mb5\": [\n\t\t\"1P 3M 5d\"\n\t],\n\t\"Mb6\": [\n\t\t\"1P 3M 13m\"\n\t],\n\t\"Msus2\": [\n\t\t\"1P 2M 5P\",\n\t\t[\n\t\t\t\"add9no3\",\n\t\t\t\"sus2\"\n\t\t]\n\t],\n\t\"Msus4\": [\n\t\t\"1P 4P 5P\",\n\t\t[\n\t\t\t\"sus\",\n\t\t\t\"sus4\"\n\t\t]\n\t],\n\t\"addb9\": [\n\t\t\"1P 3M 5P 9m\"\n\t],\n\t\"11b9\": [\n\t\t\"1P 5P 7m 9m 11P\"\n\t],\n\t\"13#11\": [\n\t\t\"1P 3M 5P 7m 9M 11A 13M\",\n\t\t[\n\t\t\t\"13+4\",\n\t\t\t\"13#4\"\n\t\t]\n\t],\n\t\"13#9\": [\n\t\t\"1P 3M 5P 7m 9A 13M\",\n\t\t[\n\t\t\t\"13#9_\"\n\t\t]\n\t],\n\t\"13#9#11\": [\n\t\t\"1P 3M 5P 7m 9A 11A 13M\"\n\t],\n\t\"13b5\": [\n\t\t\"1P 3M 5d 6M 7m 9M\"\n\t],\n\t\"13b9\": [\n\t\t\"1P 3M 5P 7m 9m 13M\"\n\t],\n\t\"13b9#11\": [\n\t\t\"1P 3M 5P 7m 9m 11A 13M\"\n\t],\n\t\"13no5\": [\n\t\t\"1P 3M 7m 9M 13M\"\n\t],\n\t\"13sus4\": [\n\t\t\"1P 4P 5P 7m 9M 13M\",\n\t\t[\n\t\t\t\"13sus\"\n\t\t]\n\t],\n\t\"69#11\": [\n\t\t\"1P 3M 5P 6M 9M 11A\"\n\t],\n\t\"7#11\": [\n\t\t\"1P 3M 5P 7m 11A\",\n\t\t[\n\t\t\t\"7+4\",\n\t\t\t\"7#4\",\n\t\t\t\"7#11_\",\n\t\t\t\"7#4_\"\n\t\t]\n\t],\n\t\"7#11b13\": [\n\t\t\"1P 3M 5P 7m 11A 13m\",\n\t\t[\n\t\t\t\"7b5b13\"\n\t\t]\n\t],\n\t\"7#5\": [\n\t\t\"1P 3M 5A 7m\",\n\t\t[\n\t\t\t\"+7\",\n\t\t\t\"7aug\",\n\t\t\t\"aug7\"\n\t\t]\n\t],\n\t\"7#5#9\": [\n\t\t\"1P 3M 5A 7m 9A\",\n\t\t[\n\t\t\t\"7alt\",\n\t\t\t\"7#5#9_\",\n\t\t\t\"7#9b13_\"\n\t\t]\n\t],\n\t\"7#5b9\": [\n\t\t\"1P 3M 5A 7m 9m\"\n\t],\n\t\"7#5b9#11\": [\n\t\t\"1P 3M 5A 7m 9m 11A\"\n\t],\n\t\"7#5sus4\": [\n\t\t\"1P 4P 5A 7m\"\n\t],\n\t\"7#9\": [\n\t\t\"1P 3M 5P 7m 9A\",\n\t\t[\n\t\t\t\"7#9_\"\n\t\t]\n\t],\n\t\"7#9#11\": [\n\t\t\"1P 3M 5P 7m 9A 11A\",\n\t\t[\n\t\t\t\"7b5#9\"\n\t\t]\n\t],\n\t\"7#9#11b13\": [\n\t\t\"1P 3M 5P 7m 9A 11A 13m\"\n\t],\n\t\"7#9b13\": [\n\t\t\"1P 3M 5P 7m 9A 13m\"\n\t],\n\t\"7add6\": [\n\t\t\"1P 3M 5P 7m 13M\",\n\t\t[\n\t\t\t\"67\",\n\t\t\t\"7add13\"\n\t\t]\n\t],\n\t\"7b13\": [\n\t\t\"1P 3M 7m 13m\"\n\t],\n\t\"7b5\": [\n\t\t\"1P 3M 5d 7m\"\n\t],\n\t\"7b6\": [\n\t\t\"1P 3M 5P 6m 7m\"\n\t],\n\t\"7b9\": [\n\t\t\"1P 3M 5P 7m 9m\"\n\t],\n\t\"7b9#11\": [\n\t\t\"1P 3M 5P 7m 9m 11A\",\n\t\t[\n\t\t\t\"7b5b9\"\n\t\t]\n\t],\n\t\"7b9#9\": [\n\t\t\"1P 3M 5P 7m 9m 9A\"\n\t],\n\t\"7b9b13\": [\n\t\t\"1P 3M 5P 7m 9m 13m\"\n\t],\n\t\"7b9b13#11\": [\n\t\t\"1P 3M 5P 7m 9m 11A 13m\",\n\t\t[\n\t\t\t\"7b9#11b13\",\n\t\t\t\"7b5b9b13\"\n\t\t]\n\t],\n\t\"7no5\": [\n\t\t\"1P 3M 7m\"\n\t],\n\t\"7sus4\": [\n\t\t\"1P 4P 5P 7m\",\n\t\t[\n\t\t\t\"7sus\"\n\t\t]\n\t],\n\t\"7sus4b9\": [\n\t\t\"1P 4P 5P 7m 9m\",\n\t\t[\n\t\t\t\"susb9\",\n\t\t\t\"7susb9\",\n\t\t\t\"7b9sus\",\n\t\t\t\"7b9sus4\",\n\t\t\t\"phryg\"\n\t\t]\n\t],\n\t\"7sus4b9b13\": [\n\t\t\"1P 4P 5P 7m 9m 13m\",\n\t\t[\n\t\t\t\"7b9b13sus4\"\n\t\t]\n\t],\n\t\"9#11\": [\n\t\t\"1P 3M 5P 7m 9M 11A\",\n\t\t[\n\t\t\t\"9+4\",\n\t\t\t\"9#4\",\n\t\t\t\"9#11_\",\n\t\t\t\"9#4_\"\n\t\t]\n\t],\n\t\"9#11b13\": [\n\t\t\"1P 3M 5P 7m 9M 11A 13m\",\n\t\t[\n\t\t\t\"9b5b13\"\n\t\t]\n\t],\n\t\"9#5\": [\n\t\t\"1P 3M 5A 7m 9M\",\n\t\t[\n\t\t\t\"9+\"\n\t\t]\n\t],\n\t\"9#5#11\": [\n\t\t\"1P 3M 5A 7m 9M 11A\"\n\t],\n\t\"9b13\": [\n\t\t\"1P 3M 7m 9M 13m\"\n\t],\n\t\"9b5\": [\n\t\t\"1P 3M 5d 7m 9M\"\n\t],\n\t\"9no5\": [\n\t\t\"1P 3M 7m 9M\"\n\t],\n\t\"9sus4\": [\n\t\t\"1P 4P 5P 7m 9M\",\n\t\t[\n\t\t\t\"9sus\"\n\t\t]\n\t],\n\t\"m\": [\n\t\t\"1P 3m 5P\",\n\t\t[\n\t\t\t\"minor\"\n\t\t]\n\t],\n\t\"m#5\": [\n\t\t\"1P 3m 5A\",\n\t\t[\n\t\t\t\"m+\",\n\t\t\t\"mb6\"\n\t\t]\n\t],\n\t\"m11\": [\n\t\t\"1P 3m 5P 7m 9M 11P\",\n\t\t[\n\t\t\t\"_11\"\n\t\t]\n\t],\n\t\"m11A 5\": [\n\t\t\"1P 3m 6m 7m 9M 11P\"\n\t],\n\t\"m11b5\": [\n\t\t\"1P 3m 7m 12d 2M 4P\",\n\t\t[\n\t\t\t\"h11\",\n\t\t\t\"_11b5\"\n\t\t]\n\t],\n\t\"m13\": [\n\t\t\"1P 3m 5P 7m 9M 11P 13M\",\n\t\t[\n\t\t\t\"_13\"\n\t\t]\n\t],\n\t\"m6\": [\n\t\t\"1P 3m 4P 5P 13M\",\n\t\t[\n\t\t\t\"_6\"\n\t\t]\n\t],\n\t\"m69\": [\n\t\t\"1P 3m 5P 6M 9M\",\n\t\t[\n\t\t\t\"_69\"\n\t\t]\n\t],\n\t\"m7\": [\n\t\t\"1P 3m 5P 7m\",\n\t\t[\n\t\t\t\"minor7\",\n\t\t\t\"_\",\n\t\t\t\"_7\"\n\t\t]\n\t],\n\t\"m7#5\": [\n\t\t\"1P 3m 6m 7m\"\n\t],\n\t\"m7add11\": [\n\t\t\"1P 3m 5P 7m 11P\",\n\t\t[\n\t\t\t\"m7add4\"\n\t\t]\n\t],\n\t\"m7b5\": [\n\t\t\"1P 3m 5d 7m\",\n\t\t[\n\t\t\t\"half-diminished\",\n\t\t\t\"h7\",\n\t\t\t\"_7b5\"\n\t\t]\n\t],\n\t\"m9\": [\n\t\t\"1P 3m 5P 7m 9M\",\n\t\t[\n\t\t\t\"_9\"\n\t\t]\n\t],\n\t\"m9#5\": [\n\t\t\"1P 3m 6m 7m 9M\"\n\t],\n\t\"m9b5\": [\n\t\t\"1P 3m 7m 12d 2M\",\n\t\t[\n\t\t\t\"h9\",\n\t\t\t\"-9b5\"\n\t\t]\n\t],\n\t\"mMaj7\": [\n\t\t\"1P 3m 5P 7M\",\n\t\t[\n\t\t\t\"mM7\",\n\t\t\t\"_M7\"\n\t\t]\n\t],\n\t\"mMaj7b6\": [\n\t\t\"1P 3m 5P 6m 7M\",\n\t\t[\n\t\t\t\"mM7b6\"\n\t\t]\n\t],\n\t\"mM9\": [\n\t\t\"1P 3m 5P 7M 9M\",\n\t\t[\n\t\t\t\"mMaj9\",\n\t\t\t\"-M9\"\n\t\t]\n\t],\n\t\"mM9b6\": [\n\t\t\"1P 3m 5P 6m 7M 9M\",\n\t\t[\n\t\t\t\"mMaj9b6\"\n\t\t]\n\t],\n\t\"mb6M7\": [\n\t\t\"1P 3m 6m 7M\"\n\t],\n\t\"mb6b9\": [\n\t\t\"1P 3m 6m 9m\"\n\t],\n\t\"o\": [\n\t\t\"1P 3m 5d\",\n\t\t[\n\t\t\t\"mb5\",\n\t\t\t\"dim\"\n\t\t]\n\t],\n\t\"o7\": [\n\t\t\"1P 3m 5d 13M\",\n\t\t[\n\t\t\t\"diminished\",\n\t\t\t\"m6b5\",\n\t\t\t\"dim7\"\n\t\t]\n\t],\n\t\"o7M7\": [\n\t\t\"1P 3m 5d 6M 7M\"\n\t],\n\t\"oM7\": [\n\t\t\"1P 3m 5d 7M\"\n\t],\n\t\"sus24\": [\n\t\t\"1P 2M 4P 5P\",\n\t\t[\n\t\t\t\"sus4add9\"\n\t\t]\n\t],\n\t\"+add#9\": [\n\t\t\"1P 3M 5A 9A\"\n\t],\n\t\"madd4\": [\n\t\t\"1P 3m 4P 5P\"\n\t],\n\t\"madd9\": [\n\t\t\"1P 3m 5P 9M\"\n\t]\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-chord/build/chords.json\n// module id = 26\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * Functions related to music notation in strings. Things like parse accidentals,\n * or convert from step to note letter.\n *\n * Glossary:\n *\n * - step: the number from 0 to 6 representing the letters from C to B\n * - letter: a valid note letter (from A to G)\n * - alteration: a number indicating the sharps (positive) or flats (negative)\n * - accidentals: a string with sharps (#) or flats (b)\n *\n * @example\n * var notation = require('tonal-notation')\n * notation.toAcc('3') // => '###'\n * notation.toAcc('-3') // => 'bbb'\n * notation.toAlt('###') // => 3\n * @module notation\n */\n\n/**\n * Given a letter, return step\n * @param {String} letter - the letter\n * @return {Integer} the step number (from 0 to 6)\n */\nfunction toStep (l) {\n  var s = 'CDEFGAB'.indexOf(l.toUpperCase())\n  return s < 0 ? null : s\n}\n\n/**\n * Test if a number is a valid step number (a number from 0 to 6)\n * @param {Integer} step - the step number\n * @return {Boolean} true if it's a valid step number, false otherwise\n */\nfunction isStep (d) { return !(d < 0 || d > 6) }\n\n/**\n * Given a step, return a letter\n * @param {Integer} step - the step number\n * @return {String} the note letter or null if not valid step number\n */\nfunction toLetter (s) {\n  return isStep(s) ? 'CDEFGAB'.charAt(s) : null\n}\n\n// ACCIDENTALS\n// ===========\n\n/**\n * Test if a string are all flats (`b`) chars\n * @param {String} str - the string to test\n * @return {Boolean} true if all charaters are `b`, false otherwise\n */\nfunction areFlats (s) { return /^b+$/.test(s) }\n/**\n * Test if a string are all sharps (`#`) chars\n * @param {String} str - the string to test\n * @return {Boolean} true if all charaters are `#`, false otherwise\n */\nfunction areSharps (s) { return /^#+$/.test(s) }\n\n/**\n * Given an accidentals string return its alteration, the number\n * of semitones (positive for sharps, negative for flats, 0 for none)\n * @param {String} accidentals - the string to parse\n * @return {Integer} the alteration number of null if not a valid accidental strings\n * @example\n * toAlt('###') // => 3\n * toAlt('bbb') // => -3\n */\nfunction toAlt (s) {\n  return s === '' ? 0\n    : areFlats(s) ? -s.length\n    : areSharps(s) ? s.length\n    : null\n}\n\nfunction fillStr (s, num) { return Array(num + 1).join(s) }\n\n/**\n * Given an alteration number, returns the accidentals string\n * @param {Integer} alteration - the number of semitones (positive and negative\n * values are accepted for sharps and flats)\n * @return {String} the accidental string\n * @example\n * toAcc(3) // => '###'\n * toAcc(-3) // => 'bbb'\n */\nfunction toAcc (n) {\n  return !n ? '' : n < 0 ? fillStr('b', -n) : fillStr('#', n)\n}\n\nexports.toStep = toStep;\nexports.isStep = isStep;\nexports.toLetter = toLetter;\nexports.areFlats = areFlats;\nexports.areSharps = areSharps;\nexports.toAlt = toAlt;\nexports.toAcc = toAcc;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-notation/build/index.js\n// module id = 27\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalNote = require('tonal-note');\nvar tonalInterval = require('tonal-interval');\nvar tonalArray = require('tonal-array');\nvar tonalTranspose = require('tonal-transpose');\nvar tonalDistance = require('tonal-distance');\nvar tonalChord = require('tonal-chord');\nvar tonalNotation = require('tonal-notation');\n\n/**\n * Given a chord progression and a tonic, return the chord progression\n * with roman numeral chords.\n *\n * @param {Array|String} chords - the chord progression\n * @param {String} tonic - the tonic\n * @return {Array} the chord progression in roman numerals\n * @example\n * progression.abstract('Cmaj7 Dm7 G7', 'C') // => [ 'Imaj7', 'IIm7', 'V7' ]\n */\nfunction abstract (chords, tonic) {\n  tonic = tonalNote.pc(tonic)\n  chords = tonalArray.map(tonalChord.parse, chords)\n  var tonics = tonalArray.compact(chords.map(function (x) { return x[1] }))\n  // if some tonic missing, can't do the analysis\n  if (tonics.length !== chords.length) return null\n\n  return tonics.map(function (t, i) {\n    var p = tonalInterval.props(tonalDistance.interval(tonic, t))\n    return buildRoman(p.num - 1, p.alt, chords[i][0])\n  })\n}\n\nvar NUMS = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII']\n/**\n * Build an abstract chord name using roman numerals\n */\nfunction buildRoman (num, alt, element) {\n  return tonalNotation.toAcc(alt) + NUMS[num % 7] + (element || '')\n}\n\n/**\n * Get chord progression from a tonic and a list of chord in roman numerals\n *\n * @param {String} tonic - the tonic\n * @param {Array|String} progression - the progression in roman numerals\n * @return {Array} the chord progression\n *\n * @example\n * var progression = require('chord-progression')\n * progression.concrete('I IIm7 V7', 'C') // => ['C', 'Dm7', 'G7']\n */\nfunction concrete (chords, tonic) {\n  return tonalArray.map(function (e) {\n    var r = parseRomanChord(e)\n    return r ? tonalTranspose.transpose(r.root, tonic) + r.type : null\n  }, chords)\n}\n\nvar ROMAN = /^\\s*(b|bb|#|##|)(IV|III|II|I|VII|VI|V|iv|iii|ii|i|vii|vi|v)\\s*(.*)\\s*$/\n/**\n * Returns a regex to match roman numbers literals with the from:\n * `[accidentals]roman[element]`.\n *\n * The executed regex contains:\n *\n * - input: the input string\n * - accidentals: (Optional) one or two flats (b) or shaprs (#)\n * - roman: (Required) a roman numeral from I to VII either in upper or lower case\n * - element: (Optional) a name of an element\n *\n * @return {RegExp} the regexp\n *\n * @example\n * var r = progression.romanRegex()\n * r.exec('bVImaj7') // => ['bVImaj7', 'b', 'VI', 'maj7'])\n * r.exec('III dom') // => ['III dom', '', 'III', 'dom'])\n */\nfunction romanRegex () { return ROMAN }\n\nvar NUM = {i: 0, ii: 1, iii: 2, iv: 3, v: 4, vi: 5, vii: 6}\n\n/**\n * Parse a chord expressed with roman numerals. It returns an interval representing\n * the root of the chord relative to the key tonic and the chord name.\n *\n * @param {String} str - the roman numeral string\n * @return {Object} the roman chord property object with:\n *\n * - type: the chord type\n * - root: the interval from the key to the root of this chord\n *\n * @example\n * var parse = require('music-notation/roman.parse')\n * parse('V7') // => { root: '5P', type: '7' }\n * parse('bIIalt') // => { root: '2m', type: 'alt' }\n */\nfunction parseRomanChord (str) {\n  var m = ROMAN.exec(str)\n  if (!m) return null\n  var num = NUM[m[2].toLowerCase()] + 1\n  var alt = m[1].length\n  if (m[1][0] === 'b') alt = -alt\n  return { root: tonalInterval.fromProps({ num: num, alt: alt, dir: 1 }), type: m[3] }\n}\n\nexports.abstract = abstract;\nexports.buildRoman = buildRoman;\nexports.concrete = concrete;\nexports.romanRegex = romanRegex;\nexports.parseRomanChord = parseRomanChord;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-progression/build/index.js\n// module id = 28\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tonalInterval = require('tonal-interval');\nvar tonalPitch = require('tonal-pitch');\nvar tonalArray = require('tonal-array');\n\n/**\n * Get the intervals analysis of a collection of notes\n *\n * Returns an array with the format `[p, m, n, s, d, t]` where:\n *\n * - p: the number of perfect fourths or fifths\n * - m: the number of major thirds or minor sixths\n * - n: the number of major sixths or minor thirds\n * - s: the number of major seconds or minor sevenths\n * - d: the number of major sevents or minor seconds\n * - t: the number of tritones\n *\n * This is, mostly, an academic puzzle to show the expresiveness of tonal.\n * Implements the ideas found in \"The Analysis of Intervals\" chapter from\n * [Harmonic Materials of Modern Music]():\n *\n * > The letters _pmn_, therefore, represent intervals commonly considered\n * consonant, whereas the letters _sdt_ represent the intervals commonly\n * considered dissonant. (...) A sonority represented, for example, by the\n * symbol `sd^2`, indicating a triad composed of one major second and two minor\n * seconds, would be recognized as a highly dissonant sound, while the symbol\n * `pmn` would indicate a consonant sound.\n *\n * @param {Array|String} notes - the notes to analyze\n * @return {Array} the _pmnsdt_ array\n */\nfunction density (list) {\n  var a, b, i\n  var notes = tonalArray.compact(tonalArray.map(tonalPitch.asNotePitch, list))\n  var len = notes.length\n  var result = [0, 0, 0, 0, 0, 0]\n  for (a = 0; a < len; a++) {\n    for (b = a; b < len; b++) {\n      i = tonalInterval.ic(tonalPitch.chr(notes[b]) - tonalPitch.chr(notes[a]))\n      if (i === 6) result[5] = result[5] + 1\n      else if (i > 0) result[5 - i] = result[5 - i] + 1\n    }\n  }\n  return result\n}\n\nexports.density = density;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tonal-sonority/build/index.js\n// module id = 29\n// module chunks = 0"],"sourceRoot":""}